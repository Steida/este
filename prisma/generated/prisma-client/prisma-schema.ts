// Code generated by Prisma (prisma@1.34.3). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateTada {
  count: Int!
}

type AggregateTeam {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

scalar Long

type Mutation {
  createTada(data: TadaCreateInput!): Tada!
  updateTada(data: TadaUpdateInput!, where: TadaWhereUniqueInput!): Tada
  updateManyTadas(data: TadaUpdateManyMutationInput!, where: TadaWhereInput): BatchPayload!
  upsertTada(where: TadaWhereUniqueInput!, create: TadaCreateInput!, update: TadaUpdateInput!): Tada!
  deleteTada(where: TadaWhereUniqueInput!): Tada
  deleteManyTadas(where: TadaWhereInput): BatchPayload!
  createTeam(data: TeamCreateInput!): Team!
  updateTeam(data: TeamUpdateInput!, where: TeamWhereUniqueInput!): Team
  updateManyTeams(data: TeamUpdateManyMutationInput!, where: TeamWhereInput): BatchPayload!
  upsertTeam(where: TeamWhereUniqueInput!, create: TeamCreateInput!, update: TeamUpdateInput!): Team!
  deleteTeam(where: TeamWhereUniqueInput!): Team
  deleteManyTeams(where: TeamWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  tada(where: TadaWhereUniqueInput!): Tada
  tadas(where: TadaWhereInput, orderBy: TadaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tada]!
  tadasConnection(where: TadaWhereInput, orderBy: TadaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TadaConnection!
  team(where: TeamWhereUniqueInput!): Team
  teams(where: TeamWhereInput, orderBy: TeamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Team]!
  teamsConnection(where: TeamWhereInput, orderBy: TeamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TeamConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  tada(where: TadaSubscriptionWhereInput): TadaSubscriptionPayload
  team(where: TeamSubscriptionWhereInput): TeamSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type Tada {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  creator: User!
  name: String!
  description: String
}

type TadaConnection {
  pageInfo: PageInfo!
  edges: [TadaEdge]!
  aggregate: AggregateTada!
}

input TadaCreateInput {
  id: ID
  creator: UserCreateOneWithoutTadasInput!
  name: String!
  description: String
}

input TadaCreateManyWithoutCreatorInput {
  create: [TadaCreateWithoutCreatorInput!]
  connect: [TadaWhereUniqueInput!]
}

input TadaCreateWithoutCreatorInput {
  id: ID
  name: String!
  description: String
}

type TadaEdge {
  node: Tada!
  cursor: String!
}

enum TadaOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
}

type TadaPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  description: String
}

input TadaScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  AND: [TadaScalarWhereInput!]
  OR: [TadaScalarWhereInput!]
  NOT: [TadaScalarWhereInput!]
}

type TadaSubscriptionPayload {
  mutation: MutationType!
  node: Tada
  updatedFields: [String!]
  previousValues: TadaPreviousValues
}

input TadaSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TadaWhereInput
  AND: [TadaSubscriptionWhereInput!]
  OR: [TadaSubscriptionWhereInput!]
  NOT: [TadaSubscriptionWhereInput!]
}

input TadaUpdateInput {
  creator: UserUpdateOneRequiredWithoutTadasInput
  name: String
  description: String
}

input TadaUpdateManyDataInput {
  name: String
  description: String
}

input TadaUpdateManyMutationInput {
  name: String
  description: String
}

input TadaUpdateManyWithoutCreatorInput {
  create: [TadaCreateWithoutCreatorInput!]
  delete: [TadaWhereUniqueInput!]
  connect: [TadaWhereUniqueInput!]
  set: [TadaWhereUniqueInput!]
  disconnect: [TadaWhereUniqueInput!]
  update: [TadaUpdateWithWhereUniqueWithoutCreatorInput!]
  upsert: [TadaUpsertWithWhereUniqueWithoutCreatorInput!]
  deleteMany: [TadaScalarWhereInput!]
  updateMany: [TadaUpdateManyWithWhereNestedInput!]
}

input TadaUpdateManyWithWhereNestedInput {
  where: TadaScalarWhereInput!
  data: TadaUpdateManyDataInput!
}

input TadaUpdateWithoutCreatorDataInput {
  name: String
  description: String
}

input TadaUpdateWithWhereUniqueWithoutCreatorInput {
  where: TadaWhereUniqueInput!
  data: TadaUpdateWithoutCreatorDataInput!
}

input TadaUpsertWithWhereUniqueWithoutCreatorInput {
  where: TadaWhereUniqueInput!
  update: TadaUpdateWithoutCreatorDataInput!
  create: TadaCreateWithoutCreatorInput!
}

input TadaWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  creator: UserWhereInput
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  AND: [TadaWhereInput!]
  OR: [TadaWhereInput!]
  NOT: [TadaWhereInput!]
}

input TadaWhereUniqueInput {
  id: ID
}

type Team {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  description: String
  members(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}

type TeamConnection {
  pageInfo: PageInfo!
  edges: [TeamEdge]!
  aggregate: AggregateTeam!
}

input TeamCreateInput {
  id: ID
  name: String!
  description: String
  members: UserCreateManyWithoutTeamInput
}

input TeamCreateOneWithoutMembersInput {
  create: TeamCreateWithoutMembersInput
  connect: TeamWhereUniqueInput
}

input TeamCreateWithoutMembersInput {
  id: ID
  name: String!
  description: String
}

type TeamEdge {
  node: Team!
  cursor: String!
}

enum TeamOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
}

type TeamPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  description: String
}

type TeamSubscriptionPayload {
  mutation: MutationType!
  node: Team
  updatedFields: [String!]
  previousValues: TeamPreviousValues
}

input TeamSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TeamWhereInput
  AND: [TeamSubscriptionWhereInput!]
  OR: [TeamSubscriptionWhereInput!]
  NOT: [TeamSubscriptionWhereInput!]
}

input TeamUpdateInput {
  name: String
  description: String
  members: UserUpdateManyWithoutTeamInput
}

input TeamUpdateManyMutationInput {
  name: String
  description: String
}

input TeamUpdateOneWithoutMembersInput {
  create: TeamCreateWithoutMembersInput
  update: TeamUpdateWithoutMembersDataInput
  upsert: TeamUpsertWithoutMembersInput
  delete: Boolean
  disconnect: Boolean
  connect: TeamWhereUniqueInput
}

input TeamUpdateWithoutMembersDataInput {
  name: String
  description: String
}

input TeamUpsertWithoutMembersInput {
  update: TeamUpdateWithoutMembersDataInput!
  create: TeamCreateWithoutMembersInput!
}

input TeamWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  members_every: UserWhereInput
  members_some: UserWhereInput
  members_none: UserWhereInput
  AND: [TeamWhereInput!]
  OR: [TeamWhereInput!]
  NOT: [TeamWhereInput!]
}

input TeamWhereUniqueInput {
  id: ID
}

type User {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
  password: String!
  themeName: String!
  tadas(where: TadaWhereInput, orderBy: TadaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tada!]
  team: Team
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  email: String!
  password: String!
  themeName: String!
  tadas: TadaCreateManyWithoutCreatorInput
  team: TeamCreateOneWithoutMembersInput
}

input UserCreateManyWithoutTeamInput {
  create: [UserCreateWithoutTeamInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneWithoutTadasInput {
  create: UserCreateWithoutTadasInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutTadasInput {
  id: ID
  email: String!
  password: String!
  themeName: String!
  team: TeamCreateOneWithoutMembersInput
}

input UserCreateWithoutTeamInput {
  id: ID
  email: String!
  password: String!
  themeName: String!
  tadas: TadaCreateManyWithoutCreatorInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  themeName_ASC
  themeName_DESC
}

type UserPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
  password: String!
  themeName: String!
}

input UserScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  themeName: String
  themeName_not: String
  themeName_in: [String!]
  themeName_not_in: [String!]
  themeName_lt: String
  themeName_lte: String
  themeName_gt: String
  themeName_gte: String
  themeName_contains: String
  themeName_not_contains: String
  themeName_starts_with: String
  themeName_not_starts_with: String
  themeName_ends_with: String
  themeName_not_ends_with: String
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  email: String
  password: String
  themeName: String
  tadas: TadaUpdateManyWithoutCreatorInput
  team: TeamUpdateOneWithoutMembersInput
}

input UserUpdateManyDataInput {
  email: String
  password: String
  themeName: String
}

input UserUpdateManyMutationInput {
  email: String
  password: String
  themeName: String
}

input UserUpdateManyWithoutTeamInput {
  create: [UserCreateWithoutTeamInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutTeamInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutTeamInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneRequiredWithoutTadasInput {
  create: UserCreateWithoutTadasInput
  update: UserUpdateWithoutTadasDataInput
  upsert: UserUpsertWithoutTadasInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutTadasDataInput {
  email: String
  password: String
  themeName: String
  team: TeamUpdateOneWithoutMembersInput
}

input UserUpdateWithoutTeamDataInput {
  email: String
  password: String
  themeName: String
  tadas: TadaUpdateManyWithoutCreatorInput
}

input UserUpdateWithWhereUniqueWithoutTeamInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutTeamDataInput!
}

input UserUpsertWithoutTadasInput {
  update: UserUpdateWithoutTadasDataInput!
  create: UserCreateWithoutTadasInput!
}

input UserUpsertWithWhereUniqueWithoutTeamInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutTeamDataInput!
  create: UserCreateWithoutTeamInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  themeName: String
  themeName_not: String
  themeName_in: [String!]
  themeName_not_in: [String!]
  themeName_lt: String
  themeName_lte: String
  themeName_gt: String
  themeName_gte: String
  themeName_contains: String
  themeName_not_contains: String
  themeName_starts_with: String
  themeName_not_starts_with: String
  themeName_ends_with: String
  themeName_not_ends_with: String
  tadas_every: TadaWhereInput
  tadas_some: TadaWhereInput
  tadas_none: TadaWhereInput
  team: TeamWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`