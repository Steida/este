# source: http://localhost:4466
# timestamp: Fri Oct 19 2018 13:49:27 GMT+0200 (Central European Summer Time)

type AggregateBorderValue {
  count: Int!
}

type AggregateColorValue {
  count: Int!
}

type AggregateComponent {
  count: Int!
}

type AggregateDimensionValue {
  count: Int!
}

type AggregateDocument {
  count: Int!
}

type AggregateElement {
  count: Int!
}

type AggregatePage {
  count: Int!
}

type AggregateStyle {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateWeb {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type BorderValue implements Node {
  id: ID!
  web: Web!
  name: String
  unit: BorderValueUnit!
  value: Int!
}

"""A connection to a list of items."""
type BorderValueConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BorderValueEdge]!
  aggregate: AggregateBorderValue!
}

input BorderValueCreateInput {
  name: String
  unit: BorderValueUnit!
  value: Int!
  web: WebCreateOneWithoutBorderValuesInput!
}

input BorderValueCreateManyWithoutWebInput {
  create: [BorderValueCreateWithoutWebInput!]
  connect: [BorderValueWhereUniqueInput!]
}

input BorderValueCreateOneInput {
  create: BorderValueCreateInput
  connect: BorderValueWhereUniqueInput
}

input BorderValueCreateWithoutWebInput {
  name: String
  unit: BorderValueUnit!
  value: Int!
}

"""An edge in a connection."""
type BorderValueEdge {
  """The item at the end of the edge."""
  node: BorderValue!

  """A cursor for use in pagination."""
  cursor: String!
}

enum BorderValueOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  unit_ASC
  unit_DESC
  value_ASC
  value_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type BorderValuePreviousValues {
  id: ID!
  name: String
  unit: BorderValueUnit!
  value: Int!
}

type BorderValueSubscriptionPayload {
  mutation: MutationType!
  node: BorderValue
  updatedFields: [String!]
  previousValues: BorderValuePreviousValues
}

input BorderValueSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [BorderValueSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [BorderValueSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BorderValueSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BorderValueWhereInput
}

enum BorderValueUnit {
  POINT
}

input BorderValueUpdateDataInput {
  name: String
  unit: BorderValueUnit
  value: Int
  web: WebUpdateOneRequiredWithoutBorderValuesInput
}

input BorderValueUpdateInput {
  name: String
  unit: BorderValueUnit
  value: Int
  web: WebUpdateOneRequiredWithoutBorderValuesInput
}

input BorderValueUpdateManyWithoutWebInput {
  create: [BorderValueCreateWithoutWebInput!]
  connect: [BorderValueWhereUniqueInput!]
  disconnect: [BorderValueWhereUniqueInput!]
  delete: [BorderValueWhereUniqueInput!]
  update: [BorderValueUpdateWithWhereUniqueWithoutWebInput!]
  upsert: [BorderValueUpsertWithWhereUniqueWithoutWebInput!]
}

input BorderValueUpdateOneInput {
  create: BorderValueCreateInput
  connect: BorderValueWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: BorderValueUpdateDataInput
  upsert: BorderValueUpsertNestedInput
}

input BorderValueUpdateWithoutWebDataInput {
  name: String
  unit: BorderValueUnit
  value: Int
}

input BorderValueUpdateWithWhereUniqueWithoutWebInput {
  where: BorderValueWhereUniqueInput!
  data: BorderValueUpdateWithoutWebDataInput!
}

input BorderValueUpsertNestedInput {
  update: BorderValueUpdateDataInput!
  create: BorderValueCreateInput!
}

input BorderValueUpsertWithWhereUniqueWithoutWebInput {
  where: BorderValueWhereUniqueInput!
  update: BorderValueUpdateWithoutWebDataInput!
  create: BorderValueCreateWithoutWebInput!
}

input BorderValueWhereInput {
  """Logical AND on all given filters."""
  AND: [BorderValueWhereInput!]

  """Logical OR on all given filters."""
  OR: [BorderValueWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BorderValueWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  unit: BorderValueUnit

  """All values that are not equal to given value."""
  unit_not: BorderValueUnit

  """All values that are contained in given list."""
  unit_in: [BorderValueUnit!]

  """All values that are not contained in given list."""
  unit_not_in: [BorderValueUnit!]
  value: Int

  """All values that are not equal to given value."""
  value_not: Int

  """All values that are contained in given list."""
  value_in: [Int!]

  """All values that are not contained in given list."""
  value_not_in: [Int!]

  """All values less than the given value."""
  value_lt: Int

  """All values less than or equal the given value."""
  value_lte: Int

  """All values greater than the given value."""
  value_gt: Int

  """All values greater than or equal the given value."""
  value_gte: Int
  web: WebWhereInput
}

input BorderValueWhereUniqueInput {
  id: ID
}

type ColorValue implements Node {
  id: ID!
  web: Web!
  name: String
  r: Int!
  g: Int!
  b: Int!
  a: Float
}

"""A connection to a list of items."""
type ColorValueConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ColorValueEdge]!
  aggregate: AggregateColorValue!
}

input ColorValueCreateInput {
  name: String
  r: Int!
  g: Int!
  b: Int!
  a: Float
  web: WebCreateOneWithoutColorValuesInput!
}

input ColorValueCreateManyWithoutWebInput {
  create: [ColorValueCreateWithoutWebInput!]
  connect: [ColorValueWhereUniqueInput!]
}

input ColorValueCreateOneInput {
  create: ColorValueCreateInput
  connect: ColorValueWhereUniqueInput
}

input ColorValueCreateWithoutWebInput {
  name: String
  r: Int!
  g: Int!
  b: Int!
  a: Float
}

"""An edge in a connection."""
type ColorValueEdge {
  """The item at the end of the edge."""
  node: ColorValue!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ColorValueOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  r_ASC
  r_DESC
  g_ASC
  g_DESC
  b_ASC
  b_DESC
  a_ASC
  a_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ColorValuePreviousValues {
  id: ID!
  name: String
  r: Int!
  g: Int!
  b: Int!
  a: Float
}

type ColorValueSubscriptionPayload {
  mutation: MutationType!
  node: ColorValue
  updatedFields: [String!]
  previousValues: ColorValuePreviousValues
}

input ColorValueSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ColorValueSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ColorValueSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ColorValueSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ColorValueWhereInput
}

input ColorValueUpdateDataInput {
  name: String
  r: Int
  g: Int
  b: Int
  a: Float
  web: WebUpdateOneRequiredWithoutColorValuesInput
}

input ColorValueUpdateInput {
  name: String
  r: Int
  g: Int
  b: Int
  a: Float
  web: WebUpdateOneRequiredWithoutColorValuesInput
}

input ColorValueUpdateManyWithoutWebInput {
  create: [ColorValueCreateWithoutWebInput!]
  connect: [ColorValueWhereUniqueInput!]
  disconnect: [ColorValueWhereUniqueInput!]
  delete: [ColorValueWhereUniqueInput!]
  update: [ColorValueUpdateWithWhereUniqueWithoutWebInput!]
  upsert: [ColorValueUpsertWithWhereUniqueWithoutWebInput!]
}

input ColorValueUpdateOneInput {
  create: ColorValueCreateInput
  connect: ColorValueWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ColorValueUpdateDataInput
  upsert: ColorValueUpsertNestedInput
}

input ColorValueUpdateWithoutWebDataInput {
  name: String
  r: Int
  g: Int
  b: Int
  a: Float
}

input ColorValueUpdateWithWhereUniqueWithoutWebInput {
  where: ColorValueWhereUniqueInput!
  data: ColorValueUpdateWithoutWebDataInput!
}

input ColorValueUpsertNestedInput {
  update: ColorValueUpdateDataInput!
  create: ColorValueCreateInput!
}

input ColorValueUpsertWithWhereUniqueWithoutWebInput {
  where: ColorValueWhereUniqueInput!
  update: ColorValueUpdateWithoutWebDataInput!
  create: ColorValueCreateWithoutWebInput!
}

input ColorValueWhereInput {
  """Logical AND on all given filters."""
  AND: [ColorValueWhereInput!]

  """Logical OR on all given filters."""
  OR: [ColorValueWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ColorValueWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  r: Int

  """All values that are not equal to given value."""
  r_not: Int

  """All values that are contained in given list."""
  r_in: [Int!]

  """All values that are not contained in given list."""
  r_not_in: [Int!]

  """All values less than the given value."""
  r_lt: Int

  """All values less than or equal the given value."""
  r_lte: Int

  """All values greater than the given value."""
  r_gt: Int

  """All values greater than or equal the given value."""
  r_gte: Int
  g: Int

  """All values that are not equal to given value."""
  g_not: Int

  """All values that are contained in given list."""
  g_in: [Int!]

  """All values that are not contained in given list."""
  g_not_in: [Int!]

  """All values less than the given value."""
  g_lt: Int

  """All values less than or equal the given value."""
  g_lte: Int

  """All values greater than the given value."""
  g_gt: Int

  """All values greater than or equal the given value."""
  g_gte: Int
  b: Int

  """All values that are not equal to given value."""
  b_not: Int

  """All values that are contained in given list."""
  b_in: [Int!]

  """All values that are not contained in given list."""
  b_not_in: [Int!]

  """All values less than the given value."""
  b_lt: Int

  """All values less than or equal the given value."""
  b_lte: Int

  """All values greater than the given value."""
  b_gt: Int

  """All values greater than or equal the given value."""
  b_gte: Int
  a: Float

  """All values that are not equal to given value."""
  a_not: Float

  """All values that are contained in given list."""
  a_in: [Float!]

  """All values that are not contained in given list."""
  a_not_in: [Float!]

  """All values less than the given value."""
  a_lt: Float

  """All values less than or equal the given value."""
  a_lte: Float

  """All values greater than the given value."""
  a_gt: Float

  """All values greater than or equal the given value."""
  a_gte: Float
  web: WebWhereInput
}

input ColorValueWhereUniqueInput {
  id: ID
}

type Component implements Node {
  id: ID!
  web(where: WebWhereInput, orderBy: WebOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Web!]
  name: String!
  document: Document
}

"""A connection to a list of items."""
type ComponentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ComponentEdge]!
  aggregate: AggregateComponent!
}

input ComponentCreateInput {
  name: String!
  web: WebCreateManyWithoutComponentsInput
  document: DocumentCreateOneInput
}

input ComponentCreateManyWithoutWebInput {
  create: [ComponentCreateWithoutWebInput!]
  connect: [ComponentWhereUniqueInput!]
}

input ComponentCreateOneInput {
  create: ComponentCreateInput
  connect: ComponentWhereUniqueInput
}

input ComponentCreateWithoutWebInput {
  name: String!
  document: DocumentCreateOneInput
}

"""An edge in a connection."""
type ComponentEdge {
  """The item at the end of the edge."""
  node: Component!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ComponentOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ComponentPreviousValues {
  id: ID!
  name: String!
}

type ComponentSubscriptionPayload {
  mutation: MutationType!
  node: Component
  updatedFields: [String!]
  previousValues: ComponentPreviousValues
}

input ComponentSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ComponentSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ComponentSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ComponentSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ComponentWhereInput
}

input ComponentUpdateDataInput {
  name: String
  web: WebUpdateManyWithoutComponentsInput
  document: DocumentUpdateOneInput
}

input ComponentUpdateInput {
  name: String
  web: WebUpdateManyWithoutComponentsInput
  document: DocumentUpdateOneInput
}

input ComponentUpdateManyWithoutWebInput {
  create: [ComponentCreateWithoutWebInput!]
  connect: [ComponentWhereUniqueInput!]
  disconnect: [ComponentWhereUniqueInput!]
  delete: [ComponentWhereUniqueInput!]
  update: [ComponentUpdateWithWhereUniqueWithoutWebInput!]
  upsert: [ComponentUpsertWithWhereUniqueWithoutWebInput!]
}

input ComponentUpdateOneInput {
  create: ComponentCreateInput
  connect: ComponentWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ComponentUpdateDataInput
  upsert: ComponentUpsertNestedInput
}

input ComponentUpdateWithoutWebDataInput {
  name: String
  document: DocumentUpdateOneInput
}

input ComponentUpdateWithWhereUniqueWithoutWebInput {
  where: ComponentWhereUniqueInput!
  data: ComponentUpdateWithoutWebDataInput!
}

input ComponentUpsertNestedInput {
  update: ComponentUpdateDataInput!
  create: ComponentCreateInput!
}

input ComponentUpsertWithWhereUniqueWithoutWebInput {
  where: ComponentWhereUniqueInput!
  update: ComponentUpdateWithoutWebDataInput!
  create: ComponentCreateWithoutWebInput!
}

input ComponentWhereInput {
  """Logical AND on all given filters."""
  AND: [ComponentWhereInput!]

  """Logical OR on all given filters."""
  OR: [ComponentWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ComponentWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  web_every: WebWhereInput
  web_some: WebWhereInput
  web_none: WebWhereInput
  document: DocumentWhereInput
}

input ComponentWhereUniqueInput {
  id: ID
}

scalar DateTime

type DimensionValue implements Node {
  id: ID!
  web: Web!
  name: String
  unit: DimensionValueUnit!
  value: Int!
}

"""A connection to a list of items."""
type DimensionValueConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DimensionValueEdge]!
  aggregate: AggregateDimensionValue!
}

input DimensionValueCreateInput {
  name: String
  unit: DimensionValueUnit!
  value: Int!
  web: WebCreateOneWithoutDimensionValuesInput!
}

input DimensionValueCreateManyWithoutWebInput {
  create: [DimensionValueCreateWithoutWebInput!]
  connect: [DimensionValueWhereUniqueInput!]
}

input DimensionValueCreateOneInput {
  create: DimensionValueCreateInput
  connect: DimensionValueWhereUniqueInput
}

input DimensionValueCreateWithoutWebInput {
  name: String
  unit: DimensionValueUnit!
  value: Int!
}

"""An edge in a connection."""
type DimensionValueEdge {
  """The item at the end of the edge."""
  node: DimensionValue!

  """A cursor for use in pagination."""
  cursor: String!
}

enum DimensionValueOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  unit_ASC
  unit_DESC
  value_ASC
  value_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type DimensionValuePreviousValues {
  id: ID!
  name: String
  unit: DimensionValueUnit!
  value: Int!
}

type DimensionValueSubscriptionPayload {
  mutation: MutationType!
  node: DimensionValue
  updatedFields: [String!]
  previousValues: DimensionValuePreviousValues
}

input DimensionValueSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [DimensionValueSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [DimensionValueSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DimensionValueSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: DimensionValueWhereInput
}

enum DimensionValueUnit {
  POINT
  PERCENTAGE
}

input DimensionValueUpdateDataInput {
  name: String
  unit: DimensionValueUnit
  value: Int
  web: WebUpdateOneRequiredWithoutDimensionValuesInput
}

input DimensionValueUpdateInput {
  name: String
  unit: DimensionValueUnit
  value: Int
  web: WebUpdateOneRequiredWithoutDimensionValuesInput
}

input DimensionValueUpdateManyWithoutWebInput {
  create: [DimensionValueCreateWithoutWebInput!]
  connect: [DimensionValueWhereUniqueInput!]
  disconnect: [DimensionValueWhereUniqueInput!]
  delete: [DimensionValueWhereUniqueInput!]
  update: [DimensionValueUpdateWithWhereUniqueWithoutWebInput!]
  upsert: [DimensionValueUpsertWithWhereUniqueWithoutWebInput!]
}

input DimensionValueUpdateOneInput {
  create: DimensionValueCreateInput
  connect: DimensionValueWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: DimensionValueUpdateDataInput
  upsert: DimensionValueUpsertNestedInput
}

input DimensionValueUpdateWithoutWebDataInput {
  name: String
  unit: DimensionValueUnit
  value: Int
}

input DimensionValueUpdateWithWhereUniqueWithoutWebInput {
  where: DimensionValueWhereUniqueInput!
  data: DimensionValueUpdateWithoutWebDataInput!
}

input DimensionValueUpsertNestedInput {
  update: DimensionValueUpdateDataInput!
  create: DimensionValueCreateInput!
}

input DimensionValueUpsertWithWhereUniqueWithoutWebInput {
  where: DimensionValueWhereUniqueInput!
  update: DimensionValueUpdateWithoutWebDataInput!
  create: DimensionValueCreateWithoutWebInput!
}

input DimensionValueWhereInput {
  """Logical AND on all given filters."""
  AND: [DimensionValueWhereInput!]

  """Logical OR on all given filters."""
  OR: [DimensionValueWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DimensionValueWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  unit: DimensionValueUnit

  """All values that are not equal to given value."""
  unit_not: DimensionValueUnit

  """All values that are contained in given list."""
  unit_in: [DimensionValueUnit!]

  """All values that are not contained in given list."""
  unit_not_in: [DimensionValueUnit!]
  value: Int

  """All values that are not equal to given value."""
  value_not: Int

  """All values that are contained in given list."""
  value_in: [Int!]

  """All values that are not contained in given list."""
  value_not_in: [Int!]

  """All values less than the given value."""
  value_lt: Int

  """All values less than or equal the given value."""
  value_lte: Int

  """All values greater than the given value."""
  value_gt: Int

  """All values greater than or equal the given value."""
  value_gte: Int
  web: WebWhereInput
}

input DimensionValueWhereUniqueInput {
  id: ID
}

type Document implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  web: Web!
  elements(where: ElementWhereInput, orderBy: ElementOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Element!]
}

"""A connection to a list of items."""
type DocumentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DocumentEdge]!
  aggregate: AggregateDocument!
}

input DocumentCreateInput {
  web: WebCreateOneWithoutDocumentsInput!
  elements: ElementCreateManyWithoutDocumentInput
}

input DocumentCreateManyWithoutWebInput {
  create: [DocumentCreateWithoutWebInput!]
  connect: [DocumentWhereUniqueInput!]
}

input DocumentCreateOneInput {
  create: DocumentCreateInput
  connect: DocumentWhereUniqueInput
}

input DocumentCreateOneWithoutElementsInput {
  create: DocumentCreateWithoutElementsInput
  connect: DocumentWhereUniqueInput
}

input DocumentCreateWithoutElementsInput {
  web: WebCreateOneWithoutDocumentsInput!
}

input DocumentCreateWithoutWebInput {
  elements: ElementCreateManyWithoutDocumentInput
}

"""An edge in a connection."""
type DocumentEdge {
  """The item at the end of the edge."""
  node: Document!

  """A cursor for use in pagination."""
  cursor: String!
}

enum DocumentOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type DocumentPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type DocumentSubscriptionPayload {
  mutation: MutationType!
  node: Document
  updatedFields: [String!]
  previousValues: DocumentPreviousValues
}

input DocumentSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [DocumentSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [DocumentSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DocumentSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: DocumentWhereInput
}

input DocumentUpdateDataInput {
  web: WebUpdateOneRequiredWithoutDocumentsInput
  elements: ElementUpdateManyWithoutDocumentInput
}

input DocumentUpdateInput {
  web: WebUpdateOneRequiredWithoutDocumentsInput
  elements: ElementUpdateManyWithoutDocumentInput
}

input DocumentUpdateManyWithoutWebInput {
  create: [DocumentCreateWithoutWebInput!]
  connect: [DocumentWhereUniqueInput!]
  disconnect: [DocumentWhereUniqueInput!]
  delete: [DocumentWhereUniqueInput!]
  update: [DocumentUpdateWithWhereUniqueWithoutWebInput!]
  upsert: [DocumentUpsertWithWhereUniqueWithoutWebInput!]
}

input DocumentUpdateOneInput {
  create: DocumentCreateInput
  connect: DocumentWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: DocumentUpdateDataInput
  upsert: DocumentUpsertNestedInput
}

input DocumentUpdateOneRequiredWithoutElementsInput {
  create: DocumentCreateWithoutElementsInput
  connect: DocumentWhereUniqueInput
  update: DocumentUpdateWithoutElementsDataInput
  upsert: DocumentUpsertWithoutElementsInput
}

input DocumentUpdateWithoutElementsDataInput {
  web: WebUpdateOneRequiredWithoutDocumentsInput
}

input DocumentUpdateWithoutWebDataInput {
  elements: ElementUpdateManyWithoutDocumentInput
}

input DocumentUpdateWithWhereUniqueWithoutWebInput {
  where: DocumentWhereUniqueInput!
  data: DocumentUpdateWithoutWebDataInput!
}

input DocumentUpsertNestedInput {
  update: DocumentUpdateDataInput!
  create: DocumentCreateInput!
}

input DocumentUpsertWithoutElementsInput {
  update: DocumentUpdateWithoutElementsDataInput!
  create: DocumentCreateWithoutElementsInput!
}

input DocumentUpsertWithWhereUniqueWithoutWebInput {
  where: DocumentWhereUniqueInput!
  update: DocumentUpdateWithoutWebDataInput!
  create: DocumentCreateWithoutWebInput!
}

input DocumentWhereInput {
  """Logical AND on all given filters."""
  AND: [DocumentWhereInput!]

  """Logical OR on all given filters."""
  OR: [DocumentWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DocumentWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  web: WebWhereInput
  elements_every: ElementWhereInput
  elements_some: ElementWhereInput
  elements_none: ElementWhereInput
}

input DocumentWhereUniqueInput {
  id: ID
}

type Element implements Node {
  id: ID!
  type: ElementType!
  document: Document!
  path: [Int!]!
  component: Component
  style: Style
}

"""A connection to a list of items."""
type ElementConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ElementEdge]!
  aggregate: AggregateElement!
}

input ElementCreateInput {
  type: ElementType!
  path: ElementCreatepathInput
  document: DocumentCreateOneWithoutElementsInput!
  component: ComponentCreateOneInput
  style: StyleCreateOneInput
}

input ElementCreateManyWithoutDocumentInput {
  create: [ElementCreateWithoutDocumentInput!]
  connect: [ElementWhereUniqueInput!]
}

input ElementCreatepathInput {
  set: [Int!]
}

input ElementCreateWithoutDocumentInput {
  type: ElementType!
  path: ElementCreatepathInput
  component: ComponentCreateOneInput
  style: StyleCreateOneInput
}

"""An edge in a connection."""
type ElementEdge {
  """The item at the end of the edge."""
  node: Element!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ElementOrderByInput {
  id_ASC
  id_DESC
  type_ASC
  type_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ElementPreviousValues {
  id: ID!
  type: ElementType!
  path: [Int!]!
}

type ElementSubscriptionPayload {
  mutation: MutationType!
  node: Element
  updatedFields: [String!]
  previousValues: ElementPreviousValues
}

input ElementSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ElementSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ElementSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ElementSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ElementWhereInput
}

enum ElementType {
  DOCUMENT
  BLOCK
  TEXT
}

input ElementUpdateInput {
  type: ElementType
  path: ElementUpdatepathInput
  document: DocumentUpdateOneRequiredWithoutElementsInput
  component: ComponentUpdateOneInput
  style: StyleUpdateOneInput
}

input ElementUpdateManyWithoutDocumentInput {
  create: [ElementCreateWithoutDocumentInput!]
  connect: [ElementWhereUniqueInput!]
  disconnect: [ElementWhereUniqueInput!]
  delete: [ElementWhereUniqueInput!]
  update: [ElementUpdateWithWhereUniqueWithoutDocumentInput!]
  upsert: [ElementUpsertWithWhereUniqueWithoutDocumentInput!]
}

input ElementUpdatepathInput {
  set: [Int!]
}

input ElementUpdateWithoutDocumentDataInput {
  type: ElementType
  path: ElementUpdatepathInput
  component: ComponentUpdateOneInput
  style: StyleUpdateOneInput
}

input ElementUpdateWithWhereUniqueWithoutDocumentInput {
  where: ElementWhereUniqueInput!
  data: ElementUpdateWithoutDocumentDataInput!
}

input ElementUpsertWithWhereUniqueWithoutDocumentInput {
  where: ElementWhereUniqueInput!
  update: ElementUpdateWithoutDocumentDataInput!
  create: ElementCreateWithoutDocumentInput!
}

input ElementWhereInput {
  """Logical AND on all given filters."""
  AND: [ElementWhereInput!]

  """Logical OR on all given filters."""
  OR: [ElementWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ElementWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  type: ElementType

  """All values that are not equal to given value."""
  type_not: ElementType

  """All values that are contained in given list."""
  type_in: [ElementType!]

  """All values that are not contained in given list."""
  type_not_in: [ElementType!]
  document: DocumentWhereInput
  component: ComponentWhereInput
  style: StyleWhereInput
}

input ElementWhereUniqueInput {
  id: ID
}

"""Raw JSON value"""
scalar Json

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createWeb(data: WebCreateInput!): Web!
  createPage(data: PageCreateInput!): Page!
  createElement(data: ElementCreateInput!): Element!
  createComponent(data: ComponentCreateInput!): Component!
  createStyle(data: StyleCreateInput!): Style!
  createDocument(data: DocumentCreateInput!): Document!
  createBorderValue(data: BorderValueCreateInput!): BorderValue!
  createDimensionValue(data: DimensionValueCreateInput!): DimensionValue!
  createColorValue(data: ColorValueCreateInput!): ColorValue!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateWeb(data: WebUpdateInput!, where: WebWhereUniqueInput!): Web
  updatePage(data: PageUpdateInput!, where: PageWhereUniqueInput!): Page
  updateElement(data: ElementUpdateInput!, where: ElementWhereUniqueInput!): Element
  updateComponent(data: ComponentUpdateInput!, where: ComponentWhereUniqueInput!): Component
  updateStyle(data: StyleUpdateInput!, where: StyleWhereUniqueInput!): Style
  updateDocument(data: DocumentUpdateInput!, where: DocumentWhereUniqueInput!): Document
  updateBorderValue(data: BorderValueUpdateInput!, where: BorderValueWhereUniqueInput!): BorderValue
  updateDimensionValue(data: DimensionValueUpdateInput!, where: DimensionValueWhereUniqueInput!): DimensionValue
  updateColorValue(data: ColorValueUpdateInput!, where: ColorValueWhereUniqueInput!): ColorValue
  deleteUser(where: UserWhereUniqueInput!): User
  deleteWeb(where: WebWhereUniqueInput!): Web
  deletePage(where: PageWhereUniqueInput!): Page
  deleteElement(where: ElementWhereUniqueInput!): Element
  deleteComponent(where: ComponentWhereUniqueInput!): Component
  deleteStyle(where: StyleWhereUniqueInput!): Style
  deleteDocument(where: DocumentWhereUniqueInput!): Document
  deleteBorderValue(where: BorderValueWhereUniqueInput!): BorderValue
  deleteDimensionValue(where: DimensionValueWhereUniqueInput!): DimensionValue
  deleteColorValue(where: ColorValueWhereUniqueInput!): ColorValue
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertWeb(where: WebWhereUniqueInput!, create: WebCreateInput!, update: WebUpdateInput!): Web!
  upsertPage(where: PageWhereUniqueInput!, create: PageCreateInput!, update: PageUpdateInput!): Page!
  upsertElement(where: ElementWhereUniqueInput!, create: ElementCreateInput!, update: ElementUpdateInput!): Element!
  upsertComponent(where: ComponentWhereUniqueInput!, create: ComponentCreateInput!, update: ComponentUpdateInput!): Component!
  upsertStyle(where: StyleWhereUniqueInput!, create: StyleCreateInput!, update: StyleUpdateInput!): Style!
  upsertDocument(where: DocumentWhereUniqueInput!, create: DocumentCreateInput!, update: DocumentUpdateInput!): Document!
  upsertBorderValue(where: BorderValueWhereUniqueInput!, create: BorderValueCreateInput!, update: BorderValueUpdateInput!): BorderValue!
  upsertDimensionValue(where: DimensionValueWhereUniqueInput!, create: DimensionValueCreateInput!, update: DimensionValueUpdateInput!): DimensionValue!
  upsertColorValue(where: ColorValueWhereUniqueInput!, create: ColorValueCreateInput!, update: ColorValueUpdateInput!): ColorValue!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  updateManyWebs(data: WebUpdateInput!, where: WebWhereInput): BatchPayload!
  updateManyPages(data: PageUpdateInput!, where: PageWhereInput): BatchPayload!
  updateManyElements(data: ElementUpdateInput!, where: ElementWhereInput): BatchPayload!
  updateManyComponents(data: ComponentUpdateInput!, where: ComponentWhereInput): BatchPayload!
  updateManyStyles(data: StyleUpdateInput!, where: StyleWhereInput): BatchPayload!
  updateManyDocuments(data: DocumentUpdateInput!, where: DocumentWhereInput): BatchPayload!
  updateManyBorderValues(data: BorderValueUpdateInput!, where: BorderValueWhereInput): BatchPayload!
  updateManyDimensionValues(data: DimensionValueUpdateInput!, where: DimensionValueWhereInput): BatchPayload!
  updateManyColorValues(data: ColorValueUpdateInput!, where: ColorValueWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyWebs(where: WebWhereInput): BatchPayload!
  deleteManyPages(where: PageWhereInput): BatchPayload!
  deleteManyElements(where: ElementWhereInput): BatchPayload!
  deleteManyComponents(where: ComponentWhereInput): BatchPayload!
  deleteManyStyles(where: StyleWhereInput): BatchPayload!
  deleteManyDocuments(where: DocumentWhereInput): BatchPayload!
  deleteManyBorderValues(where: BorderValueWhereInput): BatchPayload!
  deleteManyDimensionValues(where: DimensionValueWhereInput): BatchPayload!
  deleteManyColorValues(where: ColorValueWhereInput): BatchPayload!
  executeRaw(database: PrismaDatabase, query: String!): Json!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type Page implements Node {
  id: ID!
  creator: User!
  web: Web!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  content: Json
  document: Document
}

"""A connection to a list of items."""
type PageConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PageEdge]!
  aggregate: AggregatePage!
}

input PageCreateInput {
  title: String!
  content: Json
  creator: UserCreateOneWithoutPagesInput!
  web: WebCreateOneWithoutPagesInput!
  document: DocumentCreateOneInput
}

input PageCreateManyWithoutCreatorInput {
  create: [PageCreateWithoutCreatorInput!]
  connect: [PageWhereUniqueInput!]
}

input PageCreateManyWithoutWebInput {
  create: [PageCreateWithoutWebInput!]
  connect: [PageWhereUniqueInput!]
}

input PageCreateWithoutCreatorInput {
  title: String!
  content: Json
  web: WebCreateOneWithoutPagesInput!
  document: DocumentCreateOneInput
}

input PageCreateWithoutWebInput {
  title: String!
  content: Json
  creator: UserCreateOneWithoutPagesInput!
  document: DocumentCreateOneInput
}

"""An edge in a connection."""
type PageEdge {
  """The item at the end of the edge."""
  node: Page!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

enum PageOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  title_ASC
  title_DESC
  content_ASC
  content_DESC
}

type PagePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  content: Json
}

type PageSubscriptionPayload {
  mutation: MutationType!
  node: Page
  updatedFields: [String!]
  previousValues: PagePreviousValues
}

input PageSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PageSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PageSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PageSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PageWhereInput
}

input PageUpdateInput {
  title: String
  content: Json
  creator: UserUpdateOneRequiredWithoutPagesInput
  web: WebUpdateOneRequiredWithoutPagesInput
  document: DocumentUpdateOneInput
}

input PageUpdateManyWithoutCreatorInput {
  create: [PageCreateWithoutCreatorInput!]
  connect: [PageWhereUniqueInput!]
  disconnect: [PageWhereUniqueInput!]
  delete: [PageWhereUniqueInput!]
  update: [PageUpdateWithWhereUniqueWithoutCreatorInput!]
  upsert: [PageUpsertWithWhereUniqueWithoutCreatorInput!]
}

input PageUpdateManyWithoutWebInput {
  create: [PageCreateWithoutWebInput!]
  connect: [PageWhereUniqueInput!]
  disconnect: [PageWhereUniqueInput!]
  delete: [PageWhereUniqueInput!]
  update: [PageUpdateWithWhereUniqueWithoutWebInput!]
  upsert: [PageUpsertWithWhereUniqueWithoutWebInput!]
}

input PageUpdateWithoutCreatorDataInput {
  title: String
  content: Json
  web: WebUpdateOneRequiredWithoutPagesInput
  document: DocumentUpdateOneInput
}

input PageUpdateWithoutWebDataInput {
  title: String
  content: Json
  creator: UserUpdateOneRequiredWithoutPagesInput
  document: DocumentUpdateOneInput
}

input PageUpdateWithWhereUniqueWithoutCreatorInput {
  where: PageWhereUniqueInput!
  data: PageUpdateWithoutCreatorDataInput!
}

input PageUpdateWithWhereUniqueWithoutWebInput {
  where: PageWhereUniqueInput!
  data: PageUpdateWithoutWebDataInput!
}

input PageUpsertWithWhereUniqueWithoutCreatorInput {
  where: PageWhereUniqueInput!
  update: PageUpdateWithoutCreatorDataInput!
  create: PageCreateWithoutCreatorInput!
}

input PageUpsertWithWhereUniqueWithoutWebInput {
  where: PageWhereUniqueInput!
  update: PageUpdateWithoutWebDataInput!
  create: PageCreateWithoutWebInput!
}

input PageWhereInput {
  """Logical AND on all given filters."""
  AND: [PageWhereInput!]

  """Logical OR on all given filters."""
  OR: [PageWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PageWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  creator: UserWhereInput
  web: WebWhereInput
  document: DocumentWhereInput
}

input PageWhereUniqueInput {
  id: ID
}

enum PrismaDatabase {
  default
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  webs(where: WebWhereInput, orderBy: WebOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Web]!
  pages(where: PageWhereInput, orderBy: PageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Page]!
  elements(where: ElementWhereInput, orderBy: ElementOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Element]!
  components(where: ComponentWhereInput, orderBy: ComponentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Component]!
  styles(where: StyleWhereInput, orderBy: StyleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Style]!
  documents(where: DocumentWhereInput, orderBy: DocumentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Document]!
  borderValues(where: BorderValueWhereInput, orderBy: BorderValueOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BorderValue]!
  dimensionValues(where: DimensionValueWhereInput, orderBy: DimensionValueOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DimensionValue]!
  colorValues(where: ColorValueWhereInput, orderBy: ColorValueOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ColorValue]!
  user(where: UserWhereUniqueInput!): User
  web(where: WebWhereUniqueInput!): Web
  page(where: PageWhereUniqueInput!): Page
  element(where: ElementWhereUniqueInput!): Element
  component(where: ComponentWhereUniqueInput!): Component
  style(where: StyleWhereUniqueInput!): Style
  document(where: DocumentWhereUniqueInput!): Document
  borderValue(where: BorderValueWhereUniqueInput!): BorderValue
  dimensionValue(where: DimensionValueWhereUniqueInput!): DimensionValue
  colorValue(where: ColorValueWhereUniqueInput!): ColorValue
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  websConnection(where: WebWhereInput, orderBy: WebOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WebConnection!
  pagesConnection(where: PageWhereInput, orderBy: PageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PageConnection!
  elementsConnection(where: ElementWhereInput, orderBy: ElementOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ElementConnection!
  componentsConnection(where: ComponentWhereInput, orderBy: ComponentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ComponentConnection!
  stylesConnection(where: StyleWhereInput, orderBy: StyleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StyleConnection!
  documentsConnection(where: DocumentWhereInput, orderBy: DocumentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DocumentConnection!
  borderValuesConnection(where: BorderValueWhereInput, orderBy: BorderValueOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BorderValueConnection!
  dimensionValuesConnection(where: DimensionValueWhereInput, orderBy: DimensionValueOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DimensionValueConnection!
  colorValuesConnection(where: ColorValueWhereInput, orderBy: ColorValueOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ColorValueConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Style implements Node {
  id: ID!
  web: Web!
  name: String!
  children(where: StyleWhereInput, orderBy: StyleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Style!]
  parent: Style
  nextStyle: Style
  display: StyleDisplay
  width: DimensionValue
  height: DimensionValue
  bottom: DimensionValue
  end: DimensionValue
  left: DimensionValue
  right: DimensionValue
  start: DimensionValue
  top: DimensionValue
  minWidth: DimensionValue
  maxWidth: DimensionValue
  minHeight: DimensionValue
  maxHeight: DimensionValue
  margin: DimensionValue
  marginBottom: DimensionValue
  marginEnd: DimensionValue
  marginHorizontal: DimensionValue
  marginLeft: DimensionValue
  marginRight: DimensionValue
  marginStart: DimensionValue
  marginTop: DimensionValue
  marginVertical: DimensionValue
  padding: DimensionValue
  paddingBottom: DimensionValue
  paddingEnd: DimensionValue
  paddingHorizontal: DimensionValue
  paddingLeft: DimensionValue
  paddingRight: DimensionValue
  paddingStart: DimensionValue
  paddingTop: DimensionValue
  paddingVertical: DimensionValue
  position: StylePosition
  flexDirection: StyleFlexDirection
  flexWrap: StyleFlexWrap
  justifyContent: StyleJustifyContent
  alignItems: StyleAlignItems
  alignSelf: StyleAlignSelf
  alignContent: StyleAlignContent
  overflow: StyleOverflow
  flex: Int
  flexGrow: Int
  flexShrink: Int
  flexBasis: Int
  zIndex: Int
  direction: StyleDirection
  backgroundColor: ColorValue
  borderColor: ColorValue
  borderBottomColor: ColorValue
  borderEndColor: ColorValue
  borderLeftColor: ColorValue
  borderRightColor: ColorValue
  borderStartColor: ColorValue
  borderTopColor: ColorValue
  borderRadius: BorderValue
  borderBottomEndRadius: BorderValue
  borderBottomLeftRadius: BorderValue
  borderBottomRightRadius: BorderValue
  borderBottomStartRadius: BorderValue
  borderTopEndRadius: BorderValue
  borderTopLeftRadius: BorderValue
  borderTopRightRadius: BorderValue
  borderTopStartRadius: BorderValue
  borderStyle: StyleBorderStyle
  borderWidth: BorderValue
  borderBottomWidth: BorderValue
  borderEndWidth: BorderValue
  borderLeftWidth: BorderValue
  borderRightWidth: BorderValue
  borderStartWidth: BorderValue
  borderTopWidth: BorderValue
  opacity: Int
  color: ColorValue
  fontFamily: String
  fontSize: Int
  fontStyle: StyleFontStyle
  fontWeight: StyleFontWeight
  fontVariant: StyleFontVariant
  letterSpacing: Int
  lineHeight: Int
  textAlign: StyleTextAlign
  textAlignVertical: StyleTextAlignVertical
  textDecorationLine: StyleTextDecorationLine
  textTransform: StyleTextTransform
}

enum StyleAlignContent {
  FLEX_START
  FLEX_END
  CENTER
  STRETCH
  SPACE_BETWEEN
  SPACE_AROUND
}

enum StyleAlignItems {
  FLEX_START
  FLEX_END
  CENTER
  STRETCH
  BASELINE
}

enum StyleAlignSelf {
  AUTO
  FLEX_START
  FLEX_END
  CENTER
  STRETCH
  BASELINE
}

enum StyleBorderStyle {
  SOLID
  DOTTED
  DASHED
}

"""A connection to a list of items."""
type StyleConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [StyleEdge]!
  aggregate: AggregateStyle!
}

input StyleCreateInput {
  name: String!
  display: StyleDisplay
  position: StylePosition
  flexDirection: StyleFlexDirection
  flexWrap: StyleFlexWrap
  justifyContent: StyleJustifyContent
  alignItems: StyleAlignItems
  alignSelf: StyleAlignSelf
  alignContent: StyleAlignContent
  overflow: StyleOverflow
  flex: Int
  flexGrow: Int
  flexShrink: Int
  flexBasis: Int
  zIndex: Int
  direction: StyleDirection
  borderStyle: StyleBorderStyle
  opacity: Int
  fontFamily: String
  fontSize: Int
  fontStyle: StyleFontStyle
  fontWeight: StyleFontWeight
  fontVariant: StyleFontVariant
  letterSpacing: Int
  lineHeight: Int
  textAlign: StyleTextAlign
  textAlignVertical: StyleTextAlignVertical
  textDecorationLine: StyleTextDecorationLine
  textTransform: StyleTextTransform
  web: WebCreateOneWithoutStylesInput!
  children: StyleCreateManyWithoutParentInput
  parent: StyleCreateOneWithoutChildrenInput
  nextStyle: StyleCreateOneInput
  width: DimensionValueCreateOneInput
  height: DimensionValueCreateOneInput
  bottom: DimensionValueCreateOneInput
  end: DimensionValueCreateOneInput
  left: DimensionValueCreateOneInput
  right: DimensionValueCreateOneInput
  start: DimensionValueCreateOneInput
  top: DimensionValueCreateOneInput
  minWidth: DimensionValueCreateOneInput
  maxWidth: DimensionValueCreateOneInput
  minHeight: DimensionValueCreateOneInput
  maxHeight: DimensionValueCreateOneInput
  margin: DimensionValueCreateOneInput
  marginBottom: DimensionValueCreateOneInput
  marginEnd: DimensionValueCreateOneInput
  marginHorizontal: DimensionValueCreateOneInput
  marginLeft: DimensionValueCreateOneInput
  marginRight: DimensionValueCreateOneInput
  marginStart: DimensionValueCreateOneInput
  marginTop: DimensionValueCreateOneInput
  marginVertical: DimensionValueCreateOneInput
  padding: DimensionValueCreateOneInput
  paddingBottom: DimensionValueCreateOneInput
  paddingEnd: DimensionValueCreateOneInput
  paddingHorizontal: DimensionValueCreateOneInput
  paddingLeft: DimensionValueCreateOneInput
  paddingRight: DimensionValueCreateOneInput
  paddingStart: DimensionValueCreateOneInput
  paddingTop: DimensionValueCreateOneInput
  paddingVertical: DimensionValueCreateOneInput
  backgroundColor: ColorValueCreateOneInput
  borderColor: ColorValueCreateOneInput
  borderBottomColor: ColorValueCreateOneInput
  borderEndColor: ColorValueCreateOneInput
  borderLeftColor: ColorValueCreateOneInput
  borderRightColor: ColorValueCreateOneInput
  borderStartColor: ColorValueCreateOneInput
  borderTopColor: ColorValueCreateOneInput
  borderRadius: BorderValueCreateOneInput
  borderBottomEndRadius: BorderValueCreateOneInput
  borderBottomLeftRadius: BorderValueCreateOneInput
  borderBottomRightRadius: BorderValueCreateOneInput
  borderBottomStartRadius: BorderValueCreateOneInput
  borderTopEndRadius: BorderValueCreateOneInput
  borderTopLeftRadius: BorderValueCreateOneInput
  borderTopRightRadius: BorderValueCreateOneInput
  borderTopStartRadius: BorderValueCreateOneInput
  borderWidth: BorderValueCreateOneInput
  borderBottomWidth: BorderValueCreateOneInput
  borderEndWidth: BorderValueCreateOneInput
  borderLeftWidth: BorderValueCreateOneInput
  borderRightWidth: BorderValueCreateOneInput
  borderStartWidth: BorderValueCreateOneInput
  borderTopWidth: BorderValueCreateOneInput
  color: ColorValueCreateOneInput
}

input StyleCreateManyWithoutParentInput {
  create: [StyleCreateWithoutParentInput!]
  connect: [StyleWhereUniqueInput!]
}

input StyleCreateManyWithoutWebInput {
  create: [StyleCreateWithoutWebInput!]
  connect: [StyleWhereUniqueInput!]
}

input StyleCreateOneInput {
  create: StyleCreateInput
  connect: StyleWhereUniqueInput
}

input StyleCreateOneWithoutChildrenInput {
  create: StyleCreateWithoutChildrenInput
  connect: StyleWhereUniqueInput
}

input StyleCreateWithoutChildrenInput {
  name: String!
  display: StyleDisplay
  position: StylePosition
  flexDirection: StyleFlexDirection
  flexWrap: StyleFlexWrap
  justifyContent: StyleJustifyContent
  alignItems: StyleAlignItems
  alignSelf: StyleAlignSelf
  alignContent: StyleAlignContent
  overflow: StyleOverflow
  flex: Int
  flexGrow: Int
  flexShrink: Int
  flexBasis: Int
  zIndex: Int
  direction: StyleDirection
  borderStyle: StyleBorderStyle
  opacity: Int
  fontFamily: String
  fontSize: Int
  fontStyle: StyleFontStyle
  fontWeight: StyleFontWeight
  fontVariant: StyleFontVariant
  letterSpacing: Int
  lineHeight: Int
  textAlign: StyleTextAlign
  textAlignVertical: StyleTextAlignVertical
  textDecorationLine: StyleTextDecorationLine
  textTransform: StyleTextTransform
  web: WebCreateOneWithoutStylesInput!
  parent: StyleCreateOneWithoutChildrenInput
  nextStyle: StyleCreateOneInput
  width: DimensionValueCreateOneInput
  height: DimensionValueCreateOneInput
  bottom: DimensionValueCreateOneInput
  end: DimensionValueCreateOneInput
  left: DimensionValueCreateOneInput
  right: DimensionValueCreateOneInput
  start: DimensionValueCreateOneInput
  top: DimensionValueCreateOneInput
  minWidth: DimensionValueCreateOneInput
  maxWidth: DimensionValueCreateOneInput
  minHeight: DimensionValueCreateOneInput
  maxHeight: DimensionValueCreateOneInput
  margin: DimensionValueCreateOneInput
  marginBottom: DimensionValueCreateOneInput
  marginEnd: DimensionValueCreateOneInput
  marginHorizontal: DimensionValueCreateOneInput
  marginLeft: DimensionValueCreateOneInput
  marginRight: DimensionValueCreateOneInput
  marginStart: DimensionValueCreateOneInput
  marginTop: DimensionValueCreateOneInput
  marginVertical: DimensionValueCreateOneInput
  padding: DimensionValueCreateOneInput
  paddingBottom: DimensionValueCreateOneInput
  paddingEnd: DimensionValueCreateOneInput
  paddingHorizontal: DimensionValueCreateOneInput
  paddingLeft: DimensionValueCreateOneInput
  paddingRight: DimensionValueCreateOneInput
  paddingStart: DimensionValueCreateOneInput
  paddingTop: DimensionValueCreateOneInput
  paddingVertical: DimensionValueCreateOneInput
  backgroundColor: ColorValueCreateOneInput
  borderColor: ColorValueCreateOneInput
  borderBottomColor: ColorValueCreateOneInput
  borderEndColor: ColorValueCreateOneInput
  borderLeftColor: ColorValueCreateOneInput
  borderRightColor: ColorValueCreateOneInput
  borderStartColor: ColorValueCreateOneInput
  borderTopColor: ColorValueCreateOneInput
  borderRadius: BorderValueCreateOneInput
  borderBottomEndRadius: BorderValueCreateOneInput
  borderBottomLeftRadius: BorderValueCreateOneInput
  borderBottomRightRadius: BorderValueCreateOneInput
  borderBottomStartRadius: BorderValueCreateOneInput
  borderTopEndRadius: BorderValueCreateOneInput
  borderTopLeftRadius: BorderValueCreateOneInput
  borderTopRightRadius: BorderValueCreateOneInput
  borderTopStartRadius: BorderValueCreateOneInput
  borderWidth: BorderValueCreateOneInput
  borderBottomWidth: BorderValueCreateOneInput
  borderEndWidth: BorderValueCreateOneInput
  borderLeftWidth: BorderValueCreateOneInput
  borderRightWidth: BorderValueCreateOneInput
  borderStartWidth: BorderValueCreateOneInput
  borderTopWidth: BorderValueCreateOneInput
  color: ColorValueCreateOneInput
}

input StyleCreateWithoutParentInput {
  name: String!
  display: StyleDisplay
  position: StylePosition
  flexDirection: StyleFlexDirection
  flexWrap: StyleFlexWrap
  justifyContent: StyleJustifyContent
  alignItems: StyleAlignItems
  alignSelf: StyleAlignSelf
  alignContent: StyleAlignContent
  overflow: StyleOverflow
  flex: Int
  flexGrow: Int
  flexShrink: Int
  flexBasis: Int
  zIndex: Int
  direction: StyleDirection
  borderStyle: StyleBorderStyle
  opacity: Int
  fontFamily: String
  fontSize: Int
  fontStyle: StyleFontStyle
  fontWeight: StyleFontWeight
  fontVariant: StyleFontVariant
  letterSpacing: Int
  lineHeight: Int
  textAlign: StyleTextAlign
  textAlignVertical: StyleTextAlignVertical
  textDecorationLine: StyleTextDecorationLine
  textTransform: StyleTextTransform
  web: WebCreateOneWithoutStylesInput!
  children: StyleCreateManyWithoutParentInput
  nextStyle: StyleCreateOneInput
  width: DimensionValueCreateOneInput
  height: DimensionValueCreateOneInput
  bottom: DimensionValueCreateOneInput
  end: DimensionValueCreateOneInput
  left: DimensionValueCreateOneInput
  right: DimensionValueCreateOneInput
  start: DimensionValueCreateOneInput
  top: DimensionValueCreateOneInput
  minWidth: DimensionValueCreateOneInput
  maxWidth: DimensionValueCreateOneInput
  minHeight: DimensionValueCreateOneInput
  maxHeight: DimensionValueCreateOneInput
  margin: DimensionValueCreateOneInput
  marginBottom: DimensionValueCreateOneInput
  marginEnd: DimensionValueCreateOneInput
  marginHorizontal: DimensionValueCreateOneInput
  marginLeft: DimensionValueCreateOneInput
  marginRight: DimensionValueCreateOneInput
  marginStart: DimensionValueCreateOneInput
  marginTop: DimensionValueCreateOneInput
  marginVertical: DimensionValueCreateOneInput
  padding: DimensionValueCreateOneInput
  paddingBottom: DimensionValueCreateOneInput
  paddingEnd: DimensionValueCreateOneInput
  paddingHorizontal: DimensionValueCreateOneInput
  paddingLeft: DimensionValueCreateOneInput
  paddingRight: DimensionValueCreateOneInput
  paddingStart: DimensionValueCreateOneInput
  paddingTop: DimensionValueCreateOneInput
  paddingVertical: DimensionValueCreateOneInput
  backgroundColor: ColorValueCreateOneInput
  borderColor: ColorValueCreateOneInput
  borderBottomColor: ColorValueCreateOneInput
  borderEndColor: ColorValueCreateOneInput
  borderLeftColor: ColorValueCreateOneInput
  borderRightColor: ColorValueCreateOneInput
  borderStartColor: ColorValueCreateOneInput
  borderTopColor: ColorValueCreateOneInput
  borderRadius: BorderValueCreateOneInput
  borderBottomEndRadius: BorderValueCreateOneInput
  borderBottomLeftRadius: BorderValueCreateOneInput
  borderBottomRightRadius: BorderValueCreateOneInput
  borderBottomStartRadius: BorderValueCreateOneInput
  borderTopEndRadius: BorderValueCreateOneInput
  borderTopLeftRadius: BorderValueCreateOneInput
  borderTopRightRadius: BorderValueCreateOneInput
  borderTopStartRadius: BorderValueCreateOneInput
  borderWidth: BorderValueCreateOneInput
  borderBottomWidth: BorderValueCreateOneInput
  borderEndWidth: BorderValueCreateOneInput
  borderLeftWidth: BorderValueCreateOneInput
  borderRightWidth: BorderValueCreateOneInput
  borderStartWidth: BorderValueCreateOneInput
  borderTopWidth: BorderValueCreateOneInput
  color: ColorValueCreateOneInput
}

input StyleCreateWithoutWebInput {
  name: String!
  display: StyleDisplay
  position: StylePosition
  flexDirection: StyleFlexDirection
  flexWrap: StyleFlexWrap
  justifyContent: StyleJustifyContent
  alignItems: StyleAlignItems
  alignSelf: StyleAlignSelf
  alignContent: StyleAlignContent
  overflow: StyleOverflow
  flex: Int
  flexGrow: Int
  flexShrink: Int
  flexBasis: Int
  zIndex: Int
  direction: StyleDirection
  borderStyle: StyleBorderStyle
  opacity: Int
  fontFamily: String
  fontSize: Int
  fontStyle: StyleFontStyle
  fontWeight: StyleFontWeight
  fontVariant: StyleFontVariant
  letterSpacing: Int
  lineHeight: Int
  textAlign: StyleTextAlign
  textAlignVertical: StyleTextAlignVertical
  textDecorationLine: StyleTextDecorationLine
  textTransform: StyleTextTransform
  children: StyleCreateManyWithoutParentInput
  parent: StyleCreateOneWithoutChildrenInput
  nextStyle: StyleCreateOneInput
  width: DimensionValueCreateOneInput
  height: DimensionValueCreateOneInput
  bottom: DimensionValueCreateOneInput
  end: DimensionValueCreateOneInput
  left: DimensionValueCreateOneInput
  right: DimensionValueCreateOneInput
  start: DimensionValueCreateOneInput
  top: DimensionValueCreateOneInput
  minWidth: DimensionValueCreateOneInput
  maxWidth: DimensionValueCreateOneInput
  minHeight: DimensionValueCreateOneInput
  maxHeight: DimensionValueCreateOneInput
  margin: DimensionValueCreateOneInput
  marginBottom: DimensionValueCreateOneInput
  marginEnd: DimensionValueCreateOneInput
  marginHorizontal: DimensionValueCreateOneInput
  marginLeft: DimensionValueCreateOneInput
  marginRight: DimensionValueCreateOneInput
  marginStart: DimensionValueCreateOneInput
  marginTop: DimensionValueCreateOneInput
  marginVertical: DimensionValueCreateOneInput
  padding: DimensionValueCreateOneInput
  paddingBottom: DimensionValueCreateOneInput
  paddingEnd: DimensionValueCreateOneInput
  paddingHorizontal: DimensionValueCreateOneInput
  paddingLeft: DimensionValueCreateOneInput
  paddingRight: DimensionValueCreateOneInput
  paddingStart: DimensionValueCreateOneInput
  paddingTop: DimensionValueCreateOneInput
  paddingVertical: DimensionValueCreateOneInput
  backgroundColor: ColorValueCreateOneInput
  borderColor: ColorValueCreateOneInput
  borderBottomColor: ColorValueCreateOneInput
  borderEndColor: ColorValueCreateOneInput
  borderLeftColor: ColorValueCreateOneInput
  borderRightColor: ColorValueCreateOneInput
  borderStartColor: ColorValueCreateOneInput
  borderTopColor: ColorValueCreateOneInput
  borderRadius: BorderValueCreateOneInput
  borderBottomEndRadius: BorderValueCreateOneInput
  borderBottomLeftRadius: BorderValueCreateOneInput
  borderBottomRightRadius: BorderValueCreateOneInput
  borderBottomStartRadius: BorderValueCreateOneInput
  borderTopEndRadius: BorderValueCreateOneInput
  borderTopLeftRadius: BorderValueCreateOneInput
  borderTopRightRadius: BorderValueCreateOneInput
  borderTopStartRadius: BorderValueCreateOneInput
  borderWidth: BorderValueCreateOneInput
  borderBottomWidth: BorderValueCreateOneInput
  borderEndWidth: BorderValueCreateOneInput
  borderLeftWidth: BorderValueCreateOneInput
  borderRightWidth: BorderValueCreateOneInput
  borderStartWidth: BorderValueCreateOneInput
  borderTopWidth: BorderValueCreateOneInput
  color: ColorValueCreateOneInput
}

enum StyleDirection {
  INHERIT
  LTR
  RTL
}

enum StyleDisplay {
  NONE
  FLEX
}

"""An edge in a connection."""
type StyleEdge {
  """The item at the end of the edge."""
  node: Style!

  """A cursor for use in pagination."""
  cursor: String!
}

enum StyleFlexDirection {
  ROW
  ROW_REVERSE
  COLUMN
  COLUMN_REVERSE
}

enum StyleFlexWrap {
  WRAP
  NOWRAP
  WRAP_REVERSE
}

enum StyleFontStyle {
  NORMAL
  ITALIC
}

enum StyleFontVariant {
  SMALL_CAPS
}

enum StyleFontWeight {
  NORMAL
  BOLD
  INT_100
  INT_200
  INT_300
  INT_400
  INT_500
  INT_600
  INT_700
  INT_800
  INT_900
}

enum StyleJustifyContent {
  FLEX_START
  FLEX_END
  CENTER
  SPACE_BETWEEN
  SPACE_AROUND
  SPACE_EVENLY
}

enum StyleOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  display_ASC
  display_DESC
  position_ASC
  position_DESC
  flexDirection_ASC
  flexDirection_DESC
  flexWrap_ASC
  flexWrap_DESC
  justifyContent_ASC
  justifyContent_DESC
  alignItems_ASC
  alignItems_DESC
  alignSelf_ASC
  alignSelf_DESC
  alignContent_ASC
  alignContent_DESC
  overflow_ASC
  overflow_DESC
  flex_ASC
  flex_DESC
  flexGrow_ASC
  flexGrow_DESC
  flexShrink_ASC
  flexShrink_DESC
  flexBasis_ASC
  flexBasis_DESC
  zIndex_ASC
  zIndex_DESC
  direction_ASC
  direction_DESC
  borderStyle_ASC
  borderStyle_DESC
  opacity_ASC
  opacity_DESC
  fontFamily_ASC
  fontFamily_DESC
  fontSize_ASC
  fontSize_DESC
  fontStyle_ASC
  fontStyle_DESC
  fontWeight_ASC
  fontWeight_DESC
  fontVariant_ASC
  fontVariant_DESC
  letterSpacing_ASC
  letterSpacing_DESC
  lineHeight_ASC
  lineHeight_DESC
  textAlign_ASC
  textAlign_DESC
  textAlignVertical_ASC
  textAlignVertical_DESC
  textDecorationLine_ASC
  textDecorationLine_DESC
  textTransform_ASC
  textTransform_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

enum StyleOverflow {
  VISIBLE
  HIDDEN
  SCROLL
}

enum StylePosition {
  ABSOLUTE
  RELATIVE
}

type StylePreviousValues {
  id: ID!
  name: String!
  display: StyleDisplay
  position: StylePosition
  flexDirection: StyleFlexDirection
  flexWrap: StyleFlexWrap
  justifyContent: StyleJustifyContent
  alignItems: StyleAlignItems
  alignSelf: StyleAlignSelf
  alignContent: StyleAlignContent
  overflow: StyleOverflow
  flex: Int
  flexGrow: Int
  flexShrink: Int
  flexBasis: Int
  zIndex: Int
  direction: StyleDirection
  borderStyle: StyleBorderStyle
  opacity: Int
  fontFamily: String
  fontSize: Int
  fontStyle: StyleFontStyle
  fontWeight: StyleFontWeight
  fontVariant: StyleFontVariant
  letterSpacing: Int
  lineHeight: Int
  textAlign: StyleTextAlign
  textAlignVertical: StyleTextAlignVertical
  textDecorationLine: StyleTextDecorationLine
  textTransform: StyleTextTransform
}

type StyleSubscriptionPayload {
  mutation: MutationType!
  node: Style
  updatedFields: [String!]
  previousValues: StylePreviousValues
}

input StyleSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [StyleSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [StyleSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StyleSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: StyleWhereInput
}

enum StyleTextAlign {
  AUTO
  LEFT
  RIGHT
  CENTER
  JUSTIFY
}

enum StyleTextAlignVertical {
  AUTO
  TOP
  BOTTOM
  CENTER
}

enum StyleTextDecorationLine {
  NONE
  UNDERLINE
  LINE_THROUGH
  UNDERLINE_LINE_THROUGH
}

enum StyleTextTransform {
  NONE
  CAPITALIZE
  UPPERCASE
  LOWERCASE
}

input StyleUpdateDataInput {
  name: String
  display: StyleDisplay
  position: StylePosition
  flexDirection: StyleFlexDirection
  flexWrap: StyleFlexWrap
  justifyContent: StyleJustifyContent
  alignItems: StyleAlignItems
  alignSelf: StyleAlignSelf
  alignContent: StyleAlignContent
  overflow: StyleOverflow
  flex: Int
  flexGrow: Int
  flexShrink: Int
  flexBasis: Int
  zIndex: Int
  direction: StyleDirection
  borderStyle: StyleBorderStyle
  opacity: Int
  fontFamily: String
  fontSize: Int
  fontStyle: StyleFontStyle
  fontWeight: StyleFontWeight
  fontVariant: StyleFontVariant
  letterSpacing: Int
  lineHeight: Int
  textAlign: StyleTextAlign
  textAlignVertical: StyleTextAlignVertical
  textDecorationLine: StyleTextDecorationLine
  textTransform: StyleTextTransform
  web: WebUpdateOneRequiredWithoutStylesInput
  children: StyleUpdateManyWithoutParentInput
  parent: StyleUpdateOneWithoutChildrenInput
  nextStyle: StyleUpdateOneInput
  width: DimensionValueUpdateOneInput
  height: DimensionValueUpdateOneInput
  bottom: DimensionValueUpdateOneInput
  end: DimensionValueUpdateOneInput
  left: DimensionValueUpdateOneInput
  right: DimensionValueUpdateOneInput
  start: DimensionValueUpdateOneInput
  top: DimensionValueUpdateOneInput
  minWidth: DimensionValueUpdateOneInput
  maxWidth: DimensionValueUpdateOneInput
  minHeight: DimensionValueUpdateOneInput
  maxHeight: DimensionValueUpdateOneInput
  margin: DimensionValueUpdateOneInput
  marginBottom: DimensionValueUpdateOneInput
  marginEnd: DimensionValueUpdateOneInput
  marginHorizontal: DimensionValueUpdateOneInput
  marginLeft: DimensionValueUpdateOneInput
  marginRight: DimensionValueUpdateOneInput
  marginStart: DimensionValueUpdateOneInput
  marginTop: DimensionValueUpdateOneInput
  marginVertical: DimensionValueUpdateOneInput
  padding: DimensionValueUpdateOneInput
  paddingBottom: DimensionValueUpdateOneInput
  paddingEnd: DimensionValueUpdateOneInput
  paddingHorizontal: DimensionValueUpdateOneInput
  paddingLeft: DimensionValueUpdateOneInput
  paddingRight: DimensionValueUpdateOneInput
  paddingStart: DimensionValueUpdateOneInput
  paddingTop: DimensionValueUpdateOneInput
  paddingVertical: DimensionValueUpdateOneInput
  backgroundColor: ColorValueUpdateOneInput
  borderColor: ColorValueUpdateOneInput
  borderBottomColor: ColorValueUpdateOneInput
  borderEndColor: ColorValueUpdateOneInput
  borderLeftColor: ColorValueUpdateOneInput
  borderRightColor: ColorValueUpdateOneInput
  borderStartColor: ColorValueUpdateOneInput
  borderTopColor: ColorValueUpdateOneInput
  borderRadius: BorderValueUpdateOneInput
  borderBottomEndRadius: BorderValueUpdateOneInput
  borderBottomLeftRadius: BorderValueUpdateOneInput
  borderBottomRightRadius: BorderValueUpdateOneInput
  borderBottomStartRadius: BorderValueUpdateOneInput
  borderTopEndRadius: BorderValueUpdateOneInput
  borderTopLeftRadius: BorderValueUpdateOneInput
  borderTopRightRadius: BorderValueUpdateOneInput
  borderTopStartRadius: BorderValueUpdateOneInput
  borderWidth: BorderValueUpdateOneInput
  borderBottomWidth: BorderValueUpdateOneInput
  borderEndWidth: BorderValueUpdateOneInput
  borderLeftWidth: BorderValueUpdateOneInput
  borderRightWidth: BorderValueUpdateOneInput
  borderStartWidth: BorderValueUpdateOneInput
  borderTopWidth: BorderValueUpdateOneInput
  color: ColorValueUpdateOneInput
}

input StyleUpdateInput {
  name: String
  display: StyleDisplay
  position: StylePosition
  flexDirection: StyleFlexDirection
  flexWrap: StyleFlexWrap
  justifyContent: StyleJustifyContent
  alignItems: StyleAlignItems
  alignSelf: StyleAlignSelf
  alignContent: StyleAlignContent
  overflow: StyleOverflow
  flex: Int
  flexGrow: Int
  flexShrink: Int
  flexBasis: Int
  zIndex: Int
  direction: StyleDirection
  borderStyle: StyleBorderStyle
  opacity: Int
  fontFamily: String
  fontSize: Int
  fontStyle: StyleFontStyle
  fontWeight: StyleFontWeight
  fontVariant: StyleFontVariant
  letterSpacing: Int
  lineHeight: Int
  textAlign: StyleTextAlign
  textAlignVertical: StyleTextAlignVertical
  textDecorationLine: StyleTextDecorationLine
  textTransform: StyleTextTransform
  web: WebUpdateOneRequiredWithoutStylesInput
  children: StyleUpdateManyWithoutParentInput
  parent: StyleUpdateOneWithoutChildrenInput
  nextStyle: StyleUpdateOneInput
  width: DimensionValueUpdateOneInput
  height: DimensionValueUpdateOneInput
  bottom: DimensionValueUpdateOneInput
  end: DimensionValueUpdateOneInput
  left: DimensionValueUpdateOneInput
  right: DimensionValueUpdateOneInput
  start: DimensionValueUpdateOneInput
  top: DimensionValueUpdateOneInput
  minWidth: DimensionValueUpdateOneInput
  maxWidth: DimensionValueUpdateOneInput
  minHeight: DimensionValueUpdateOneInput
  maxHeight: DimensionValueUpdateOneInput
  margin: DimensionValueUpdateOneInput
  marginBottom: DimensionValueUpdateOneInput
  marginEnd: DimensionValueUpdateOneInput
  marginHorizontal: DimensionValueUpdateOneInput
  marginLeft: DimensionValueUpdateOneInput
  marginRight: DimensionValueUpdateOneInput
  marginStart: DimensionValueUpdateOneInput
  marginTop: DimensionValueUpdateOneInput
  marginVertical: DimensionValueUpdateOneInput
  padding: DimensionValueUpdateOneInput
  paddingBottom: DimensionValueUpdateOneInput
  paddingEnd: DimensionValueUpdateOneInput
  paddingHorizontal: DimensionValueUpdateOneInput
  paddingLeft: DimensionValueUpdateOneInput
  paddingRight: DimensionValueUpdateOneInput
  paddingStart: DimensionValueUpdateOneInput
  paddingTop: DimensionValueUpdateOneInput
  paddingVertical: DimensionValueUpdateOneInput
  backgroundColor: ColorValueUpdateOneInput
  borderColor: ColorValueUpdateOneInput
  borderBottomColor: ColorValueUpdateOneInput
  borderEndColor: ColorValueUpdateOneInput
  borderLeftColor: ColorValueUpdateOneInput
  borderRightColor: ColorValueUpdateOneInput
  borderStartColor: ColorValueUpdateOneInput
  borderTopColor: ColorValueUpdateOneInput
  borderRadius: BorderValueUpdateOneInput
  borderBottomEndRadius: BorderValueUpdateOneInput
  borderBottomLeftRadius: BorderValueUpdateOneInput
  borderBottomRightRadius: BorderValueUpdateOneInput
  borderBottomStartRadius: BorderValueUpdateOneInput
  borderTopEndRadius: BorderValueUpdateOneInput
  borderTopLeftRadius: BorderValueUpdateOneInput
  borderTopRightRadius: BorderValueUpdateOneInput
  borderTopStartRadius: BorderValueUpdateOneInput
  borderWidth: BorderValueUpdateOneInput
  borderBottomWidth: BorderValueUpdateOneInput
  borderEndWidth: BorderValueUpdateOneInput
  borderLeftWidth: BorderValueUpdateOneInput
  borderRightWidth: BorderValueUpdateOneInput
  borderStartWidth: BorderValueUpdateOneInput
  borderTopWidth: BorderValueUpdateOneInput
  color: ColorValueUpdateOneInput
}

input StyleUpdateManyWithoutParentInput {
  create: [StyleCreateWithoutParentInput!]
  connect: [StyleWhereUniqueInput!]
  disconnect: [StyleWhereUniqueInput!]
  delete: [StyleWhereUniqueInput!]
  update: [StyleUpdateWithWhereUniqueWithoutParentInput!]
  upsert: [StyleUpsertWithWhereUniqueWithoutParentInput!]
}

input StyleUpdateManyWithoutWebInput {
  create: [StyleCreateWithoutWebInput!]
  connect: [StyleWhereUniqueInput!]
  disconnect: [StyleWhereUniqueInput!]
  delete: [StyleWhereUniqueInput!]
  update: [StyleUpdateWithWhereUniqueWithoutWebInput!]
  upsert: [StyleUpsertWithWhereUniqueWithoutWebInput!]
}

input StyleUpdateOneInput {
  create: StyleCreateInput
  connect: StyleWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: StyleUpdateDataInput
  upsert: StyleUpsertNestedInput
}

input StyleUpdateOneWithoutChildrenInput {
  create: StyleCreateWithoutChildrenInput
  connect: StyleWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: StyleUpdateWithoutChildrenDataInput
  upsert: StyleUpsertWithoutChildrenInput
}

input StyleUpdateWithoutChildrenDataInput {
  name: String
  display: StyleDisplay
  position: StylePosition
  flexDirection: StyleFlexDirection
  flexWrap: StyleFlexWrap
  justifyContent: StyleJustifyContent
  alignItems: StyleAlignItems
  alignSelf: StyleAlignSelf
  alignContent: StyleAlignContent
  overflow: StyleOverflow
  flex: Int
  flexGrow: Int
  flexShrink: Int
  flexBasis: Int
  zIndex: Int
  direction: StyleDirection
  borderStyle: StyleBorderStyle
  opacity: Int
  fontFamily: String
  fontSize: Int
  fontStyle: StyleFontStyle
  fontWeight: StyleFontWeight
  fontVariant: StyleFontVariant
  letterSpacing: Int
  lineHeight: Int
  textAlign: StyleTextAlign
  textAlignVertical: StyleTextAlignVertical
  textDecorationLine: StyleTextDecorationLine
  textTransform: StyleTextTransform
  web: WebUpdateOneRequiredWithoutStylesInput
  parent: StyleUpdateOneWithoutChildrenInput
  nextStyle: StyleUpdateOneInput
  width: DimensionValueUpdateOneInput
  height: DimensionValueUpdateOneInput
  bottom: DimensionValueUpdateOneInput
  end: DimensionValueUpdateOneInput
  left: DimensionValueUpdateOneInput
  right: DimensionValueUpdateOneInput
  start: DimensionValueUpdateOneInput
  top: DimensionValueUpdateOneInput
  minWidth: DimensionValueUpdateOneInput
  maxWidth: DimensionValueUpdateOneInput
  minHeight: DimensionValueUpdateOneInput
  maxHeight: DimensionValueUpdateOneInput
  margin: DimensionValueUpdateOneInput
  marginBottom: DimensionValueUpdateOneInput
  marginEnd: DimensionValueUpdateOneInput
  marginHorizontal: DimensionValueUpdateOneInput
  marginLeft: DimensionValueUpdateOneInput
  marginRight: DimensionValueUpdateOneInput
  marginStart: DimensionValueUpdateOneInput
  marginTop: DimensionValueUpdateOneInput
  marginVertical: DimensionValueUpdateOneInput
  padding: DimensionValueUpdateOneInput
  paddingBottom: DimensionValueUpdateOneInput
  paddingEnd: DimensionValueUpdateOneInput
  paddingHorizontal: DimensionValueUpdateOneInput
  paddingLeft: DimensionValueUpdateOneInput
  paddingRight: DimensionValueUpdateOneInput
  paddingStart: DimensionValueUpdateOneInput
  paddingTop: DimensionValueUpdateOneInput
  paddingVertical: DimensionValueUpdateOneInput
  backgroundColor: ColorValueUpdateOneInput
  borderColor: ColorValueUpdateOneInput
  borderBottomColor: ColorValueUpdateOneInput
  borderEndColor: ColorValueUpdateOneInput
  borderLeftColor: ColorValueUpdateOneInput
  borderRightColor: ColorValueUpdateOneInput
  borderStartColor: ColorValueUpdateOneInput
  borderTopColor: ColorValueUpdateOneInput
  borderRadius: BorderValueUpdateOneInput
  borderBottomEndRadius: BorderValueUpdateOneInput
  borderBottomLeftRadius: BorderValueUpdateOneInput
  borderBottomRightRadius: BorderValueUpdateOneInput
  borderBottomStartRadius: BorderValueUpdateOneInput
  borderTopEndRadius: BorderValueUpdateOneInput
  borderTopLeftRadius: BorderValueUpdateOneInput
  borderTopRightRadius: BorderValueUpdateOneInput
  borderTopStartRadius: BorderValueUpdateOneInput
  borderWidth: BorderValueUpdateOneInput
  borderBottomWidth: BorderValueUpdateOneInput
  borderEndWidth: BorderValueUpdateOneInput
  borderLeftWidth: BorderValueUpdateOneInput
  borderRightWidth: BorderValueUpdateOneInput
  borderStartWidth: BorderValueUpdateOneInput
  borderTopWidth: BorderValueUpdateOneInput
  color: ColorValueUpdateOneInput
}

input StyleUpdateWithoutParentDataInput {
  name: String
  display: StyleDisplay
  position: StylePosition
  flexDirection: StyleFlexDirection
  flexWrap: StyleFlexWrap
  justifyContent: StyleJustifyContent
  alignItems: StyleAlignItems
  alignSelf: StyleAlignSelf
  alignContent: StyleAlignContent
  overflow: StyleOverflow
  flex: Int
  flexGrow: Int
  flexShrink: Int
  flexBasis: Int
  zIndex: Int
  direction: StyleDirection
  borderStyle: StyleBorderStyle
  opacity: Int
  fontFamily: String
  fontSize: Int
  fontStyle: StyleFontStyle
  fontWeight: StyleFontWeight
  fontVariant: StyleFontVariant
  letterSpacing: Int
  lineHeight: Int
  textAlign: StyleTextAlign
  textAlignVertical: StyleTextAlignVertical
  textDecorationLine: StyleTextDecorationLine
  textTransform: StyleTextTransform
  web: WebUpdateOneRequiredWithoutStylesInput
  children: StyleUpdateManyWithoutParentInput
  nextStyle: StyleUpdateOneInput
  width: DimensionValueUpdateOneInput
  height: DimensionValueUpdateOneInput
  bottom: DimensionValueUpdateOneInput
  end: DimensionValueUpdateOneInput
  left: DimensionValueUpdateOneInput
  right: DimensionValueUpdateOneInput
  start: DimensionValueUpdateOneInput
  top: DimensionValueUpdateOneInput
  minWidth: DimensionValueUpdateOneInput
  maxWidth: DimensionValueUpdateOneInput
  minHeight: DimensionValueUpdateOneInput
  maxHeight: DimensionValueUpdateOneInput
  margin: DimensionValueUpdateOneInput
  marginBottom: DimensionValueUpdateOneInput
  marginEnd: DimensionValueUpdateOneInput
  marginHorizontal: DimensionValueUpdateOneInput
  marginLeft: DimensionValueUpdateOneInput
  marginRight: DimensionValueUpdateOneInput
  marginStart: DimensionValueUpdateOneInput
  marginTop: DimensionValueUpdateOneInput
  marginVertical: DimensionValueUpdateOneInput
  padding: DimensionValueUpdateOneInput
  paddingBottom: DimensionValueUpdateOneInput
  paddingEnd: DimensionValueUpdateOneInput
  paddingHorizontal: DimensionValueUpdateOneInput
  paddingLeft: DimensionValueUpdateOneInput
  paddingRight: DimensionValueUpdateOneInput
  paddingStart: DimensionValueUpdateOneInput
  paddingTop: DimensionValueUpdateOneInput
  paddingVertical: DimensionValueUpdateOneInput
  backgroundColor: ColorValueUpdateOneInput
  borderColor: ColorValueUpdateOneInput
  borderBottomColor: ColorValueUpdateOneInput
  borderEndColor: ColorValueUpdateOneInput
  borderLeftColor: ColorValueUpdateOneInput
  borderRightColor: ColorValueUpdateOneInput
  borderStartColor: ColorValueUpdateOneInput
  borderTopColor: ColorValueUpdateOneInput
  borderRadius: BorderValueUpdateOneInput
  borderBottomEndRadius: BorderValueUpdateOneInput
  borderBottomLeftRadius: BorderValueUpdateOneInput
  borderBottomRightRadius: BorderValueUpdateOneInput
  borderBottomStartRadius: BorderValueUpdateOneInput
  borderTopEndRadius: BorderValueUpdateOneInput
  borderTopLeftRadius: BorderValueUpdateOneInput
  borderTopRightRadius: BorderValueUpdateOneInput
  borderTopStartRadius: BorderValueUpdateOneInput
  borderWidth: BorderValueUpdateOneInput
  borderBottomWidth: BorderValueUpdateOneInput
  borderEndWidth: BorderValueUpdateOneInput
  borderLeftWidth: BorderValueUpdateOneInput
  borderRightWidth: BorderValueUpdateOneInput
  borderStartWidth: BorderValueUpdateOneInput
  borderTopWidth: BorderValueUpdateOneInput
  color: ColorValueUpdateOneInput
}

input StyleUpdateWithoutWebDataInput {
  name: String
  display: StyleDisplay
  position: StylePosition
  flexDirection: StyleFlexDirection
  flexWrap: StyleFlexWrap
  justifyContent: StyleJustifyContent
  alignItems: StyleAlignItems
  alignSelf: StyleAlignSelf
  alignContent: StyleAlignContent
  overflow: StyleOverflow
  flex: Int
  flexGrow: Int
  flexShrink: Int
  flexBasis: Int
  zIndex: Int
  direction: StyleDirection
  borderStyle: StyleBorderStyle
  opacity: Int
  fontFamily: String
  fontSize: Int
  fontStyle: StyleFontStyle
  fontWeight: StyleFontWeight
  fontVariant: StyleFontVariant
  letterSpacing: Int
  lineHeight: Int
  textAlign: StyleTextAlign
  textAlignVertical: StyleTextAlignVertical
  textDecorationLine: StyleTextDecorationLine
  textTransform: StyleTextTransform
  children: StyleUpdateManyWithoutParentInput
  parent: StyleUpdateOneWithoutChildrenInput
  nextStyle: StyleUpdateOneInput
  width: DimensionValueUpdateOneInput
  height: DimensionValueUpdateOneInput
  bottom: DimensionValueUpdateOneInput
  end: DimensionValueUpdateOneInput
  left: DimensionValueUpdateOneInput
  right: DimensionValueUpdateOneInput
  start: DimensionValueUpdateOneInput
  top: DimensionValueUpdateOneInput
  minWidth: DimensionValueUpdateOneInput
  maxWidth: DimensionValueUpdateOneInput
  minHeight: DimensionValueUpdateOneInput
  maxHeight: DimensionValueUpdateOneInput
  margin: DimensionValueUpdateOneInput
  marginBottom: DimensionValueUpdateOneInput
  marginEnd: DimensionValueUpdateOneInput
  marginHorizontal: DimensionValueUpdateOneInput
  marginLeft: DimensionValueUpdateOneInput
  marginRight: DimensionValueUpdateOneInput
  marginStart: DimensionValueUpdateOneInput
  marginTop: DimensionValueUpdateOneInput
  marginVertical: DimensionValueUpdateOneInput
  padding: DimensionValueUpdateOneInput
  paddingBottom: DimensionValueUpdateOneInput
  paddingEnd: DimensionValueUpdateOneInput
  paddingHorizontal: DimensionValueUpdateOneInput
  paddingLeft: DimensionValueUpdateOneInput
  paddingRight: DimensionValueUpdateOneInput
  paddingStart: DimensionValueUpdateOneInput
  paddingTop: DimensionValueUpdateOneInput
  paddingVertical: DimensionValueUpdateOneInput
  backgroundColor: ColorValueUpdateOneInput
  borderColor: ColorValueUpdateOneInput
  borderBottomColor: ColorValueUpdateOneInput
  borderEndColor: ColorValueUpdateOneInput
  borderLeftColor: ColorValueUpdateOneInput
  borderRightColor: ColorValueUpdateOneInput
  borderStartColor: ColorValueUpdateOneInput
  borderTopColor: ColorValueUpdateOneInput
  borderRadius: BorderValueUpdateOneInput
  borderBottomEndRadius: BorderValueUpdateOneInput
  borderBottomLeftRadius: BorderValueUpdateOneInput
  borderBottomRightRadius: BorderValueUpdateOneInput
  borderBottomStartRadius: BorderValueUpdateOneInput
  borderTopEndRadius: BorderValueUpdateOneInput
  borderTopLeftRadius: BorderValueUpdateOneInput
  borderTopRightRadius: BorderValueUpdateOneInput
  borderTopStartRadius: BorderValueUpdateOneInput
  borderWidth: BorderValueUpdateOneInput
  borderBottomWidth: BorderValueUpdateOneInput
  borderEndWidth: BorderValueUpdateOneInput
  borderLeftWidth: BorderValueUpdateOneInput
  borderRightWidth: BorderValueUpdateOneInput
  borderStartWidth: BorderValueUpdateOneInput
  borderTopWidth: BorderValueUpdateOneInput
  color: ColorValueUpdateOneInput
}

input StyleUpdateWithWhereUniqueWithoutParentInput {
  where: StyleWhereUniqueInput!
  data: StyleUpdateWithoutParentDataInput!
}

input StyleUpdateWithWhereUniqueWithoutWebInput {
  where: StyleWhereUniqueInput!
  data: StyleUpdateWithoutWebDataInput!
}

input StyleUpsertNestedInput {
  update: StyleUpdateDataInput!
  create: StyleCreateInput!
}

input StyleUpsertWithoutChildrenInput {
  update: StyleUpdateWithoutChildrenDataInput!
  create: StyleCreateWithoutChildrenInput!
}

input StyleUpsertWithWhereUniqueWithoutParentInput {
  where: StyleWhereUniqueInput!
  update: StyleUpdateWithoutParentDataInput!
  create: StyleCreateWithoutParentInput!
}

input StyleUpsertWithWhereUniqueWithoutWebInput {
  where: StyleWhereUniqueInput!
  update: StyleUpdateWithoutWebDataInput!
  create: StyleCreateWithoutWebInput!
}

input StyleWhereInput {
  """Logical AND on all given filters."""
  AND: [StyleWhereInput!]

  """Logical OR on all given filters."""
  OR: [StyleWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StyleWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  display: StyleDisplay

  """All values that are not equal to given value."""
  display_not: StyleDisplay

  """All values that are contained in given list."""
  display_in: [StyleDisplay!]

  """All values that are not contained in given list."""
  display_not_in: [StyleDisplay!]
  position: StylePosition

  """All values that are not equal to given value."""
  position_not: StylePosition

  """All values that are contained in given list."""
  position_in: [StylePosition!]

  """All values that are not contained in given list."""
  position_not_in: [StylePosition!]
  flexDirection: StyleFlexDirection

  """All values that are not equal to given value."""
  flexDirection_not: StyleFlexDirection

  """All values that are contained in given list."""
  flexDirection_in: [StyleFlexDirection!]

  """All values that are not contained in given list."""
  flexDirection_not_in: [StyleFlexDirection!]
  flexWrap: StyleFlexWrap

  """All values that are not equal to given value."""
  flexWrap_not: StyleFlexWrap

  """All values that are contained in given list."""
  flexWrap_in: [StyleFlexWrap!]

  """All values that are not contained in given list."""
  flexWrap_not_in: [StyleFlexWrap!]
  justifyContent: StyleJustifyContent

  """All values that are not equal to given value."""
  justifyContent_not: StyleJustifyContent

  """All values that are contained in given list."""
  justifyContent_in: [StyleJustifyContent!]

  """All values that are not contained in given list."""
  justifyContent_not_in: [StyleJustifyContent!]
  alignItems: StyleAlignItems

  """All values that are not equal to given value."""
  alignItems_not: StyleAlignItems

  """All values that are contained in given list."""
  alignItems_in: [StyleAlignItems!]

  """All values that are not contained in given list."""
  alignItems_not_in: [StyleAlignItems!]
  alignSelf: StyleAlignSelf

  """All values that are not equal to given value."""
  alignSelf_not: StyleAlignSelf

  """All values that are contained in given list."""
  alignSelf_in: [StyleAlignSelf!]

  """All values that are not contained in given list."""
  alignSelf_not_in: [StyleAlignSelf!]
  alignContent: StyleAlignContent

  """All values that are not equal to given value."""
  alignContent_not: StyleAlignContent

  """All values that are contained in given list."""
  alignContent_in: [StyleAlignContent!]

  """All values that are not contained in given list."""
  alignContent_not_in: [StyleAlignContent!]
  overflow: StyleOverflow

  """All values that are not equal to given value."""
  overflow_not: StyleOverflow

  """All values that are contained in given list."""
  overflow_in: [StyleOverflow!]

  """All values that are not contained in given list."""
  overflow_not_in: [StyleOverflow!]
  flex: Int

  """All values that are not equal to given value."""
  flex_not: Int

  """All values that are contained in given list."""
  flex_in: [Int!]

  """All values that are not contained in given list."""
  flex_not_in: [Int!]

  """All values less than the given value."""
  flex_lt: Int

  """All values less than or equal the given value."""
  flex_lte: Int

  """All values greater than the given value."""
  flex_gt: Int

  """All values greater than or equal the given value."""
  flex_gte: Int
  flexGrow: Int

  """All values that are not equal to given value."""
  flexGrow_not: Int

  """All values that are contained in given list."""
  flexGrow_in: [Int!]

  """All values that are not contained in given list."""
  flexGrow_not_in: [Int!]

  """All values less than the given value."""
  flexGrow_lt: Int

  """All values less than or equal the given value."""
  flexGrow_lte: Int

  """All values greater than the given value."""
  flexGrow_gt: Int

  """All values greater than or equal the given value."""
  flexGrow_gte: Int
  flexShrink: Int

  """All values that are not equal to given value."""
  flexShrink_not: Int

  """All values that are contained in given list."""
  flexShrink_in: [Int!]

  """All values that are not contained in given list."""
  flexShrink_not_in: [Int!]

  """All values less than the given value."""
  flexShrink_lt: Int

  """All values less than or equal the given value."""
  flexShrink_lte: Int

  """All values greater than the given value."""
  flexShrink_gt: Int

  """All values greater than or equal the given value."""
  flexShrink_gte: Int
  flexBasis: Int

  """All values that are not equal to given value."""
  flexBasis_not: Int

  """All values that are contained in given list."""
  flexBasis_in: [Int!]

  """All values that are not contained in given list."""
  flexBasis_not_in: [Int!]

  """All values less than the given value."""
  flexBasis_lt: Int

  """All values less than or equal the given value."""
  flexBasis_lte: Int

  """All values greater than the given value."""
  flexBasis_gt: Int

  """All values greater than or equal the given value."""
  flexBasis_gte: Int
  zIndex: Int

  """All values that are not equal to given value."""
  zIndex_not: Int

  """All values that are contained in given list."""
  zIndex_in: [Int!]

  """All values that are not contained in given list."""
  zIndex_not_in: [Int!]

  """All values less than the given value."""
  zIndex_lt: Int

  """All values less than or equal the given value."""
  zIndex_lte: Int

  """All values greater than the given value."""
  zIndex_gt: Int

  """All values greater than or equal the given value."""
  zIndex_gte: Int
  direction: StyleDirection

  """All values that are not equal to given value."""
  direction_not: StyleDirection

  """All values that are contained in given list."""
  direction_in: [StyleDirection!]

  """All values that are not contained in given list."""
  direction_not_in: [StyleDirection!]
  borderStyle: StyleBorderStyle

  """All values that are not equal to given value."""
  borderStyle_not: StyleBorderStyle

  """All values that are contained in given list."""
  borderStyle_in: [StyleBorderStyle!]

  """All values that are not contained in given list."""
  borderStyle_not_in: [StyleBorderStyle!]
  opacity: Int

  """All values that are not equal to given value."""
  opacity_not: Int

  """All values that are contained in given list."""
  opacity_in: [Int!]

  """All values that are not contained in given list."""
  opacity_not_in: [Int!]

  """All values less than the given value."""
  opacity_lt: Int

  """All values less than or equal the given value."""
  opacity_lte: Int

  """All values greater than the given value."""
  opacity_gt: Int

  """All values greater than or equal the given value."""
  opacity_gte: Int
  fontFamily: String

  """All values that are not equal to given value."""
  fontFamily_not: String

  """All values that are contained in given list."""
  fontFamily_in: [String!]

  """All values that are not contained in given list."""
  fontFamily_not_in: [String!]

  """All values less than the given value."""
  fontFamily_lt: String

  """All values less than or equal the given value."""
  fontFamily_lte: String

  """All values greater than the given value."""
  fontFamily_gt: String

  """All values greater than or equal the given value."""
  fontFamily_gte: String

  """All values containing the given string."""
  fontFamily_contains: String

  """All values not containing the given string."""
  fontFamily_not_contains: String

  """All values starting with the given string."""
  fontFamily_starts_with: String

  """All values not starting with the given string."""
  fontFamily_not_starts_with: String

  """All values ending with the given string."""
  fontFamily_ends_with: String

  """All values not ending with the given string."""
  fontFamily_not_ends_with: String
  fontSize: Int

  """All values that are not equal to given value."""
  fontSize_not: Int

  """All values that are contained in given list."""
  fontSize_in: [Int!]

  """All values that are not contained in given list."""
  fontSize_not_in: [Int!]

  """All values less than the given value."""
  fontSize_lt: Int

  """All values less than or equal the given value."""
  fontSize_lte: Int

  """All values greater than the given value."""
  fontSize_gt: Int

  """All values greater than or equal the given value."""
  fontSize_gte: Int
  fontStyle: StyleFontStyle

  """All values that are not equal to given value."""
  fontStyle_not: StyleFontStyle

  """All values that are contained in given list."""
  fontStyle_in: [StyleFontStyle!]

  """All values that are not contained in given list."""
  fontStyle_not_in: [StyleFontStyle!]
  fontWeight: StyleFontWeight

  """All values that are not equal to given value."""
  fontWeight_not: StyleFontWeight

  """All values that are contained in given list."""
  fontWeight_in: [StyleFontWeight!]

  """All values that are not contained in given list."""
  fontWeight_not_in: [StyleFontWeight!]
  fontVariant: StyleFontVariant

  """All values that are not equal to given value."""
  fontVariant_not: StyleFontVariant

  """All values that are contained in given list."""
  fontVariant_in: [StyleFontVariant!]

  """All values that are not contained in given list."""
  fontVariant_not_in: [StyleFontVariant!]
  letterSpacing: Int

  """All values that are not equal to given value."""
  letterSpacing_not: Int

  """All values that are contained in given list."""
  letterSpacing_in: [Int!]

  """All values that are not contained in given list."""
  letterSpacing_not_in: [Int!]

  """All values less than the given value."""
  letterSpacing_lt: Int

  """All values less than or equal the given value."""
  letterSpacing_lte: Int

  """All values greater than the given value."""
  letterSpacing_gt: Int

  """All values greater than or equal the given value."""
  letterSpacing_gte: Int
  lineHeight: Int

  """All values that are not equal to given value."""
  lineHeight_not: Int

  """All values that are contained in given list."""
  lineHeight_in: [Int!]

  """All values that are not contained in given list."""
  lineHeight_not_in: [Int!]

  """All values less than the given value."""
  lineHeight_lt: Int

  """All values less than or equal the given value."""
  lineHeight_lte: Int

  """All values greater than the given value."""
  lineHeight_gt: Int

  """All values greater than or equal the given value."""
  lineHeight_gte: Int
  textAlign: StyleTextAlign

  """All values that are not equal to given value."""
  textAlign_not: StyleTextAlign

  """All values that are contained in given list."""
  textAlign_in: [StyleTextAlign!]

  """All values that are not contained in given list."""
  textAlign_not_in: [StyleTextAlign!]
  textAlignVertical: StyleTextAlignVertical

  """All values that are not equal to given value."""
  textAlignVertical_not: StyleTextAlignVertical

  """All values that are contained in given list."""
  textAlignVertical_in: [StyleTextAlignVertical!]

  """All values that are not contained in given list."""
  textAlignVertical_not_in: [StyleTextAlignVertical!]
  textDecorationLine: StyleTextDecorationLine

  """All values that are not equal to given value."""
  textDecorationLine_not: StyleTextDecorationLine

  """All values that are contained in given list."""
  textDecorationLine_in: [StyleTextDecorationLine!]

  """All values that are not contained in given list."""
  textDecorationLine_not_in: [StyleTextDecorationLine!]
  textTransform: StyleTextTransform

  """All values that are not equal to given value."""
  textTransform_not: StyleTextTransform

  """All values that are contained in given list."""
  textTransform_in: [StyleTextTransform!]

  """All values that are not contained in given list."""
  textTransform_not_in: [StyleTextTransform!]
  web: WebWhereInput
  children_every: StyleWhereInput
  children_some: StyleWhereInput
  children_none: StyleWhereInput
  parent: StyleWhereInput
  nextStyle: StyleWhereInput
  width: DimensionValueWhereInput
  height: DimensionValueWhereInput
  bottom: DimensionValueWhereInput
  end: DimensionValueWhereInput
  left: DimensionValueWhereInput
  right: DimensionValueWhereInput
  start: DimensionValueWhereInput
  top: DimensionValueWhereInput
  minWidth: DimensionValueWhereInput
  maxWidth: DimensionValueWhereInput
  minHeight: DimensionValueWhereInput
  maxHeight: DimensionValueWhereInput
  margin: DimensionValueWhereInput
  marginBottom: DimensionValueWhereInput
  marginEnd: DimensionValueWhereInput
  marginHorizontal: DimensionValueWhereInput
  marginLeft: DimensionValueWhereInput
  marginRight: DimensionValueWhereInput
  marginStart: DimensionValueWhereInput
  marginTop: DimensionValueWhereInput
  marginVertical: DimensionValueWhereInput
  padding: DimensionValueWhereInput
  paddingBottom: DimensionValueWhereInput
  paddingEnd: DimensionValueWhereInput
  paddingHorizontal: DimensionValueWhereInput
  paddingLeft: DimensionValueWhereInput
  paddingRight: DimensionValueWhereInput
  paddingStart: DimensionValueWhereInput
  paddingTop: DimensionValueWhereInput
  paddingVertical: DimensionValueWhereInput
  backgroundColor: ColorValueWhereInput
  borderColor: ColorValueWhereInput
  borderBottomColor: ColorValueWhereInput
  borderEndColor: ColorValueWhereInput
  borderLeftColor: ColorValueWhereInput
  borderRightColor: ColorValueWhereInput
  borderStartColor: ColorValueWhereInput
  borderTopColor: ColorValueWhereInput
  borderRadius: BorderValueWhereInput
  borderBottomEndRadius: BorderValueWhereInput
  borderBottomLeftRadius: BorderValueWhereInput
  borderBottomRightRadius: BorderValueWhereInput
  borderBottomStartRadius: BorderValueWhereInput
  borderTopEndRadius: BorderValueWhereInput
  borderTopLeftRadius: BorderValueWhereInput
  borderTopRightRadius: BorderValueWhereInput
  borderTopStartRadius: BorderValueWhereInput
  borderWidth: BorderValueWhereInput
  borderBottomWidth: BorderValueWhereInput
  borderEndWidth: BorderValueWhereInput
  borderLeftWidth: BorderValueWhereInput
  borderRightWidth: BorderValueWhereInput
  borderStartWidth: BorderValueWhereInput
  borderTopWidth: BorderValueWhereInput
  color: ColorValueWhereInput
}

input StyleWhereUniqueInput {
  id: ID
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  web(where: WebSubscriptionWhereInput): WebSubscriptionPayload
  page(where: PageSubscriptionWhereInput): PageSubscriptionPayload
  element(where: ElementSubscriptionWhereInput): ElementSubscriptionPayload
  component(where: ComponentSubscriptionWhereInput): ComponentSubscriptionPayload
  style(where: StyleSubscriptionWhereInput): StyleSubscriptionPayload
  document(where: DocumentSubscriptionWhereInput): DocumentSubscriptionPayload
  borderValue(where: BorderValueSubscriptionWhereInput): BorderValueSubscriptionPayload
  dimensionValue(where: DimensionValueSubscriptionWhereInput): DimensionValueSubscriptionPayload
  colorValue(where: ColorValueSubscriptionWhereInput): ColorValueSubscriptionPayload
}

type User implements Node {
  id: ID!
  webs(where: WebWhereInput, orderBy: WebOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Web!]
  pages(where: PageWhereInput, orderBy: PageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Page!]
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
  password: String!
  themeName: String
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  email: String!
  password: String!
  themeName: String
  webs: WebCreateManyWithoutCreatorInput
  pages: PageCreateManyWithoutCreatorInput
}

input UserCreateOneWithoutPagesInput {
  create: UserCreateWithoutPagesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutWebsInput {
  create: UserCreateWithoutWebsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutPagesInput {
  email: String!
  password: String!
  themeName: String
  webs: WebCreateManyWithoutCreatorInput
}

input UserCreateWithoutWebsInput {
  email: String!
  password: String!
  themeName: String
  pages: PageCreateManyWithoutCreatorInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  themeName_ASC
  themeName_DESC
}

type UserPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
  password: String!
  themeName: String
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  email: String
  password: String
  themeName: String
  webs: WebUpdateManyWithoutCreatorInput
  pages: PageUpdateManyWithoutCreatorInput
}

input UserUpdateOneRequiredWithoutPagesInput {
  create: UserCreateWithoutPagesInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutPagesDataInput
  upsert: UserUpsertWithoutPagesInput
}

input UserUpdateOneRequiredWithoutWebsInput {
  create: UserCreateWithoutWebsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutWebsDataInput
  upsert: UserUpsertWithoutWebsInput
}

input UserUpdateWithoutPagesDataInput {
  email: String
  password: String
  themeName: String
  webs: WebUpdateManyWithoutCreatorInput
}

input UserUpdateWithoutWebsDataInput {
  email: String
  password: String
  themeName: String
  pages: PageUpdateManyWithoutCreatorInput
}

input UserUpsertWithoutPagesInput {
  update: UserUpdateWithoutPagesDataInput!
  create: UserCreateWithoutPagesInput!
}

input UserUpsertWithoutWebsInput {
  update: UserUpdateWithoutWebsDataInput!
  create: UserCreateWithoutWebsInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  themeName: String

  """All values that are not equal to given value."""
  themeName_not: String

  """All values that are contained in given list."""
  themeName_in: [String!]

  """All values that are not contained in given list."""
  themeName_not_in: [String!]

  """All values less than the given value."""
  themeName_lt: String

  """All values less than or equal the given value."""
  themeName_lte: String

  """All values greater than the given value."""
  themeName_gt: String

  """All values greater than or equal the given value."""
  themeName_gte: String

  """All values containing the given string."""
  themeName_contains: String

  """All values not containing the given string."""
  themeName_not_contains: String

  """All values starting with the given string."""
  themeName_starts_with: String

  """All values not starting with the given string."""
  themeName_not_starts_with: String

  """All values ending with the given string."""
  themeName_ends_with: String

  """All values not ending with the given string."""
  themeName_not_ends_with: String
  webs_every: WebWhereInput
  webs_some: WebWhereInput
  webs_none: WebWhereInput
  pages_every: PageWhereInput
  pages_some: PageWhereInput
  pages_none: PageWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

type Web implements Node {
  id: ID!
  creator: User!
  pages(where: PageWhereInput, orderBy: PageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Page!]
  documents(where: DocumentWhereInput, orderBy: DocumentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Document!]
  components(where: ComponentWhereInput, orderBy: ComponentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Component!]
  styles(where: StyleWhereInput, orderBy: StyleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Style!]
  dimensionValues(where: DimensionValueWhereInput, orderBy: DimensionValueOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DimensionValue!]
  colorValues(where: ColorValueWhereInput, orderBy: ColorValueOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ColorValue!]
  borderValues(where: BorderValueWhereInput, orderBy: BorderValueOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BorderValue!]
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
}

"""A connection to a list of items."""
type WebConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [WebEdge]!
  aggregate: AggregateWeb!
}

input WebCreateInput {
  name: String!
  creator: UserCreateOneWithoutWebsInput!
  pages: PageCreateManyWithoutWebInput
  documents: DocumentCreateManyWithoutWebInput
  components: ComponentCreateManyWithoutWebInput
  styles: StyleCreateManyWithoutWebInput
  dimensionValues: DimensionValueCreateManyWithoutWebInput
  colorValues: ColorValueCreateManyWithoutWebInput
  borderValues: BorderValueCreateManyWithoutWebInput
}

input WebCreateManyWithoutComponentsInput {
  create: [WebCreateWithoutComponentsInput!]
  connect: [WebWhereUniqueInput!]
}

input WebCreateManyWithoutCreatorInput {
  create: [WebCreateWithoutCreatorInput!]
  connect: [WebWhereUniqueInput!]
}

input WebCreateOneWithoutBorderValuesInput {
  create: WebCreateWithoutBorderValuesInput
  connect: WebWhereUniqueInput
}

input WebCreateOneWithoutColorValuesInput {
  create: WebCreateWithoutColorValuesInput
  connect: WebWhereUniqueInput
}

input WebCreateOneWithoutDimensionValuesInput {
  create: WebCreateWithoutDimensionValuesInput
  connect: WebWhereUniqueInput
}

input WebCreateOneWithoutDocumentsInput {
  create: WebCreateWithoutDocumentsInput
  connect: WebWhereUniqueInput
}

input WebCreateOneWithoutPagesInput {
  create: WebCreateWithoutPagesInput
  connect: WebWhereUniqueInput
}

input WebCreateOneWithoutStylesInput {
  create: WebCreateWithoutStylesInput
  connect: WebWhereUniqueInput
}

input WebCreateWithoutBorderValuesInput {
  name: String!
  creator: UserCreateOneWithoutWebsInput!
  pages: PageCreateManyWithoutWebInput
  documents: DocumentCreateManyWithoutWebInput
  components: ComponentCreateManyWithoutWebInput
  styles: StyleCreateManyWithoutWebInput
  dimensionValues: DimensionValueCreateManyWithoutWebInput
  colorValues: ColorValueCreateManyWithoutWebInput
}

input WebCreateWithoutColorValuesInput {
  name: String!
  creator: UserCreateOneWithoutWebsInput!
  pages: PageCreateManyWithoutWebInput
  documents: DocumentCreateManyWithoutWebInput
  components: ComponentCreateManyWithoutWebInput
  styles: StyleCreateManyWithoutWebInput
  dimensionValues: DimensionValueCreateManyWithoutWebInput
  borderValues: BorderValueCreateManyWithoutWebInput
}

input WebCreateWithoutComponentsInput {
  name: String!
  creator: UserCreateOneWithoutWebsInput!
  pages: PageCreateManyWithoutWebInput
  documents: DocumentCreateManyWithoutWebInput
  styles: StyleCreateManyWithoutWebInput
  dimensionValues: DimensionValueCreateManyWithoutWebInput
  colorValues: ColorValueCreateManyWithoutWebInput
  borderValues: BorderValueCreateManyWithoutWebInput
}

input WebCreateWithoutCreatorInput {
  name: String!
  pages: PageCreateManyWithoutWebInput
  documents: DocumentCreateManyWithoutWebInput
  components: ComponentCreateManyWithoutWebInput
  styles: StyleCreateManyWithoutWebInput
  dimensionValues: DimensionValueCreateManyWithoutWebInput
  colorValues: ColorValueCreateManyWithoutWebInput
  borderValues: BorderValueCreateManyWithoutWebInput
}

input WebCreateWithoutDimensionValuesInput {
  name: String!
  creator: UserCreateOneWithoutWebsInput!
  pages: PageCreateManyWithoutWebInput
  documents: DocumentCreateManyWithoutWebInput
  components: ComponentCreateManyWithoutWebInput
  styles: StyleCreateManyWithoutWebInput
  colorValues: ColorValueCreateManyWithoutWebInput
  borderValues: BorderValueCreateManyWithoutWebInput
}

input WebCreateWithoutDocumentsInput {
  name: String!
  creator: UserCreateOneWithoutWebsInput!
  pages: PageCreateManyWithoutWebInput
  components: ComponentCreateManyWithoutWebInput
  styles: StyleCreateManyWithoutWebInput
  dimensionValues: DimensionValueCreateManyWithoutWebInput
  colorValues: ColorValueCreateManyWithoutWebInput
  borderValues: BorderValueCreateManyWithoutWebInput
}

input WebCreateWithoutPagesInput {
  name: String!
  creator: UserCreateOneWithoutWebsInput!
  documents: DocumentCreateManyWithoutWebInput
  components: ComponentCreateManyWithoutWebInput
  styles: StyleCreateManyWithoutWebInput
  dimensionValues: DimensionValueCreateManyWithoutWebInput
  colorValues: ColorValueCreateManyWithoutWebInput
  borderValues: BorderValueCreateManyWithoutWebInput
}

input WebCreateWithoutStylesInput {
  name: String!
  creator: UserCreateOneWithoutWebsInput!
  pages: PageCreateManyWithoutWebInput
  documents: DocumentCreateManyWithoutWebInput
  components: ComponentCreateManyWithoutWebInput
  dimensionValues: DimensionValueCreateManyWithoutWebInput
  colorValues: ColorValueCreateManyWithoutWebInput
  borderValues: BorderValueCreateManyWithoutWebInput
}

"""An edge in a connection."""
type WebEdge {
  """The item at the end of the edge."""
  node: Web!

  """A cursor for use in pagination."""
  cursor: String!
}

enum WebOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
}

type WebPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
}

type WebSubscriptionPayload {
  mutation: MutationType!
  node: Web
  updatedFields: [String!]
  previousValues: WebPreviousValues
}

input WebSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [WebSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [WebSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [WebSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: WebWhereInput
}

input WebUpdateInput {
  name: String
  creator: UserUpdateOneRequiredWithoutWebsInput
  pages: PageUpdateManyWithoutWebInput
  documents: DocumentUpdateManyWithoutWebInput
  components: ComponentUpdateManyWithoutWebInput
  styles: StyleUpdateManyWithoutWebInput
  dimensionValues: DimensionValueUpdateManyWithoutWebInput
  colorValues: ColorValueUpdateManyWithoutWebInput
  borderValues: BorderValueUpdateManyWithoutWebInput
}

input WebUpdateManyWithoutComponentsInput {
  create: [WebCreateWithoutComponentsInput!]
  connect: [WebWhereUniqueInput!]
  disconnect: [WebWhereUniqueInput!]
  delete: [WebWhereUniqueInput!]
  update: [WebUpdateWithWhereUniqueWithoutComponentsInput!]
  upsert: [WebUpsertWithWhereUniqueWithoutComponentsInput!]
}

input WebUpdateManyWithoutCreatorInput {
  create: [WebCreateWithoutCreatorInput!]
  connect: [WebWhereUniqueInput!]
  disconnect: [WebWhereUniqueInput!]
  delete: [WebWhereUniqueInput!]
  update: [WebUpdateWithWhereUniqueWithoutCreatorInput!]
  upsert: [WebUpsertWithWhereUniqueWithoutCreatorInput!]
}

input WebUpdateOneRequiredWithoutBorderValuesInput {
  create: WebCreateWithoutBorderValuesInput
  connect: WebWhereUniqueInput
  update: WebUpdateWithoutBorderValuesDataInput
  upsert: WebUpsertWithoutBorderValuesInput
}

input WebUpdateOneRequiredWithoutColorValuesInput {
  create: WebCreateWithoutColorValuesInput
  connect: WebWhereUniqueInput
  update: WebUpdateWithoutColorValuesDataInput
  upsert: WebUpsertWithoutColorValuesInput
}

input WebUpdateOneRequiredWithoutDimensionValuesInput {
  create: WebCreateWithoutDimensionValuesInput
  connect: WebWhereUniqueInput
  update: WebUpdateWithoutDimensionValuesDataInput
  upsert: WebUpsertWithoutDimensionValuesInput
}

input WebUpdateOneRequiredWithoutDocumentsInput {
  create: WebCreateWithoutDocumentsInput
  connect: WebWhereUniqueInput
  update: WebUpdateWithoutDocumentsDataInput
  upsert: WebUpsertWithoutDocumentsInput
}

input WebUpdateOneRequiredWithoutPagesInput {
  create: WebCreateWithoutPagesInput
  connect: WebWhereUniqueInput
  update: WebUpdateWithoutPagesDataInput
  upsert: WebUpsertWithoutPagesInput
}

input WebUpdateOneRequiredWithoutStylesInput {
  create: WebCreateWithoutStylesInput
  connect: WebWhereUniqueInput
  update: WebUpdateWithoutStylesDataInput
  upsert: WebUpsertWithoutStylesInput
}

input WebUpdateWithoutBorderValuesDataInput {
  name: String
  creator: UserUpdateOneRequiredWithoutWebsInput
  pages: PageUpdateManyWithoutWebInput
  documents: DocumentUpdateManyWithoutWebInput
  components: ComponentUpdateManyWithoutWebInput
  styles: StyleUpdateManyWithoutWebInput
  dimensionValues: DimensionValueUpdateManyWithoutWebInput
  colorValues: ColorValueUpdateManyWithoutWebInput
}

input WebUpdateWithoutColorValuesDataInput {
  name: String
  creator: UserUpdateOneRequiredWithoutWebsInput
  pages: PageUpdateManyWithoutWebInput
  documents: DocumentUpdateManyWithoutWebInput
  components: ComponentUpdateManyWithoutWebInput
  styles: StyleUpdateManyWithoutWebInput
  dimensionValues: DimensionValueUpdateManyWithoutWebInput
  borderValues: BorderValueUpdateManyWithoutWebInput
}

input WebUpdateWithoutComponentsDataInput {
  name: String
  creator: UserUpdateOneRequiredWithoutWebsInput
  pages: PageUpdateManyWithoutWebInput
  documents: DocumentUpdateManyWithoutWebInput
  styles: StyleUpdateManyWithoutWebInput
  dimensionValues: DimensionValueUpdateManyWithoutWebInput
  colorValues: ColorValueUpdateManyWithoutWebInput
  borderValues: BorderValueUpdateManyWithoutWebInput
}

input WebUpdateWithoutCreatorDataInput {
  name: String
  pages: PageUpdateManyWithoutWebInput
  documents: DocumentUpdateManyWithoutWebInput
  components: ComponentUpdateManyWithoutWebInput
  styles: StyleUpdateManyWithoutWebInput
  dimensionValues: DimensionValueUpdateManyWithoutWebInput
  colorValues: ColorValueUpdateManyWithoutWebInput
  borderValues: BorderValueUpdateManyWithoutWebInput
}

input WebUpdateWithoutDimensionValuesDataInput {
  name: String
  creator: UserUpdateOneRequiredWithoutWebsInput
  pages: PageUpdateManyWithoutWebInput
  documents: DocumentUpdateManyWithoutWebInput
  components: ComponentUpdateManyWithoutWebInput
  styles: StyleUpdateManyWithoutWebInput
  colorValues: ColorValueUpdateManyWithoutWebInput
  borderValues: BorderValueUpdateManyWithoutWebInput
}

input WebUpdateWithoutDocumentsDataInput {
  name: String
  creator: UserUpdateOneRequiredWithoutWebsInput
  pages: PageUpdateManyWithoutWebInput
  components: ComponentUpdateManyWithoutWebInput
  styles: StyleUpdateManyWithoutWebInput
  dimensionValues: DimensionValueUpdateManyWithoutWebInput
  colorValues: ColorValueUpdateManyWithoutWebInput
  borderValues: BorderValueUpdateManyWithoutWebInput
}

input WebUpdateWithoutPagesDataInput {
  name: String
  creator: UserUpdateOneRequiredWithoutWebsInput
  documents: DocumentUpdateManyWithoutWebInput
  components: ComponentUpdateManyWithoutWebInput
  styles: StyleUpdateManyWithoutWebInput
  dimensionValues: DimensionValueUpdateManyWithoutWebInput
  colorValues: ColorValueUpdateManyWithoutWebInput
  borderValues: BorderValueUpdateManyWithoutWebInput
}

input WebUpdateWithoutStylesDataInput {
  name: String
  creator: UserUpdateOneRequiredWithoutWebsInput
  pages: PageUpdateManyWithoutWebInput
  documents: DocumentUpdateManyWithoutWebInput
  components: ComponentUpdateManyWithoutWebInput
  dimensionValues: DimensionValueUpdateManyWithoutWebInput
  colorValues: ColorValueUpdateManyWithoutWebInput
  borderValues: BorderValueUpdateManyWithoutWebInput
}

input WebUpdateWithWhereUniqueWithoutComponentsInput {
  where: WebWhereUniqueInput!
  data: WebUpdateWithoutComponentsDataInput!
}

input WebUpdateWithWhereUniqueWithoutCreatorInput {
  where: WebWhereUniqueInput!
  data: WebUpdateWithoutCreatorDataInput!
}

input WebUpsertWithoutBorderValuesInput {
  update: WebUpdateWithoutBorderValuesDataInput!
  create: WebCreateWithoutBorderValuesInput!
}

input WebUpsertWithoutColorValuesInput {
  update: WebUpdateWithoutColorValuesDataInput!
  create: WebCreateWithoutColorValuesInput!
}

input WebUpsertWithoutDimensionValuesInput {
  update: WebUpdateWithoutDimensionValuesDataInput!
  create: WebCreateWithoutDimensionValuesInput!
}

input WebUpsertWithoutDocumentsInput {
  update: WebUpdateWithoutDocumentsDataInput!
  create: WebCreateWithoutDocumentsInput!
}

input WebUpsertWithoutPagesInput {
  update: WebUpdateWithoutPagesDataInput!
  create: WebCreateWithoutPagesInput!
}

input WebUpsertWithoutStylesInput {
  update: WebUpdateWithoutStylesDataInput!
  create: WebCreateWithoutStylesInput!
}

input WebUpsertWithWhereUniqueWithoutComponentsInput {
  where: WebWhereUniqueInput!
  update: WebUpdateWithoutComponentsDataInput!
  create: WebCreateWithoutComponentsInput!
}

input WebUpsertWithWhereUniqueWithoutCreatorInput {
  where: WebWhereUniqueInput!
  update: WebUpdateWithoutCreatorDataInput!
  create: WebCreateWithoutCreatorInput!
}

input WebWhereInput {
  """Logical AND on all given filters."""
  AND: [WebWhereInput!]

  """Logical OR on all given filters."""
  OR: [WebWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [WebWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  creator: UserWhereInput
  pages_every: PageWhereInput
  pages_some: PageWhereInput
  pages_none: PageWhereInput
  documents_every: DocumentWhereInput
  documents_some: DocumentWhereInput
  documents_none: DocumentWhereInput
  components_every: ComponentWhereInput
  components_some: ComponentWhereInput
  components_none: ComponentWhereInput
  styles_every: StyleWhereInput
  styles_some: StyleWhereInput
  styles_none: StyleWhereInput
  dimensionValues_every: DimensionValueWhereInput
  dimensionValues_some: DimensionValueWhereInput
  dimensionValues_none: DimensionValueWhereInput
  colorValues_every: ColorValueWhereInput
  colorValues_some: ColorValueWhereInput
  colorValues_none: ColorValueWhereInput
  borderValues_every: BorderValueWhereInput
  borderValues_some: BorderValueWhereInput
  borderValues_none: BorderValueWhereInput
}

input WebWhereUniqueInput {
  id: ID
}
