# https://github.com/este/este/wiki/GraphQL
# https://www.prisma.io/features/data-modeling/

type User {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!
  # TODO: Refactor to auth providers. Email, Facebook, Twitter, etc.
  email: String! @unique
  password: String!
  # TODO: Refactor to Theme.
  themeName: String
  # Created by a user.
  webs: [Web!]!
  pages: [Page!]!
  elements: [Element!]!
  images: [Image!]!
}

type Web {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!
  creator: User!
  name: String!
  pages: [Page!]! @relation(name: "WebPages", onDelete: CASCADE)
}

type Page {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!
  creator: User!
  title: String!
  web: Web! @relation(name: "WebPages", onDelete: SET_NULL)
  children: Children!
}

# Document. It has no ID.
# https://www.prisma.io/features/data-modeling/
type Children {
  # I don't know how to enforce referential integrity. It's up the API.
  # We can update model later, because 1) Make it work. 2) Make it right...
  elements: [Element!]!
  order: [ID!]!
}

type Element {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!
  creator: User!
  # Name is optional, because it can be derived by content.
  name: String
  # Prisma does not support interfaces nor union types yet.
  # https://github.com/prismagraphql/prisma/issues/165
  contentText: String
  contentTextFormat: String! @default(value: "CommonMark")
  contentImage: Image
  contentChildren: Children
}

type Image {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!
  src: String!
  width: Int!
  height: Int!
  creator: User!
}
