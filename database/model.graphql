# https://github.com/este/este/wiki/GraphQL
# https://www.prisma.io/features/data-modeling/

# Note Prisma does not support interfaces nor union types yet.
# https://github.com/prismagraphql/prisma/issues/165

type User {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!
  # TODO: Refactor to auth providers. Email, Facebook, Twitter, etc.
  email: String! @unique
  password: String!
  # TODO: Refactor to Theme.
  themeName: String
  # Created by a user.
  webs: [Web!]!
  pages: [Page!]!
  elements: [Element!]!
  images: [Image!]!
}

type Web {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  creator: User!
  pages: [Page!]! @relation(name: "WebPage", onDelete: CASCADE)
}

type Page {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  creator: User!
  web: Web! @relation(name: "WebPage", onDelete: SET_NULL)
  element: Element!
}

# Prisma does not support interfaces nor union types yet.
# https://github.com/prismagraphql/prisma/issues/165
# This is a workaround. Otherwise we could use the union:
# Example: union ElementValue = Text | Image | Children
# This enum ensures a good enough consistency.
enum ElementType {
  TEXT
  IMAGE
  CHILDREN
}

type Element {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  type: ElementType!
  # Text, image, and children. Will be merged to value union type someday.
  text: String
  textFormat: String! @default(value: "CommonMark")
  image: Image
  children: [Child!]! @relation(name: "ElementChildren")
  creator: User!
  parent: [Child!]! @relation(name: "ChildElement")
}

type Child {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!
  index: Int!
  parent: Element! @relation(name: "ElementChildren")
  element: Element! @relation(name: "ChildElement")
}

type Image {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!
  src: String!
  width: Int!
  height: Int!
  creator: User!
}
