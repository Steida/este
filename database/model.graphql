# Prisma does not support interfaces nor union types yet, so we emulate it.
# TODO: Use custom scalars instead of Int and Float, e.g. 0-256, 0-1, etc.
# https://docs.slatejs.org/guides/data-model#documents-and-nodes
# https://datubaze.files.wordpress.com/2016/03/celkos-trees-and-hierarchies-in-sql_2004.pdf
# https://social.msdn.microsoft.com/Forums/sqlserver/en-US/f686ccb9-e936-4cfd-af6a-a52a0ed56b26/does-a-nested-set-model-defy-normalization?forum=databasedesign
# https://bojanz.wordpress.com/2014/04/25/storing-hierarchical-data-materialized-path/
# http://mikehillyer.com/articles/managing-hierarchical-data-in-mysql/

type User {
  id: ID! @unique
  webs: [Web!]!
  pages: [Page!]!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String! @unique
  password: String!
  themeName: String
}

type Web {
  id: ID! @unique
  creator: User!
  pages: [Page!]! @relation(name: "WebPages")
  documents: [Document!]! @relation(name: "WebDocuments")
  components: [Component!]! @relation(name: "WebsComponents")
  styles: [Style!]! @relation(name: "WebStyles")
  dimensionValues: [DimensionValue!]! @relation(name: "WebDimensionValues")
  colorValues: [ColorValue!]! @relation(name: "WebColorValues")
  borderValues: [BorderValue!]! @relation(name: "WebBorderValues")
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
}

type Page {
  id: ID! @unique
  creator: User!
  web: Web! @relation(name: "WebPages")
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  # TODO: Remove content, make document required.
  content: Json
  document: Document @relation(name: "PageDocument")
}

type Document {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!
  # Document must belong to a web. No orphans.
  web: Web! @relation(name: "WebDocuments")
  elements: [Element!]! @relation(name: "DocumentElements", onDelete: CASCADE)
}

type Element {
  id: ID! @unique
  type: ElementType!
  # Element must belong to a document. No orphans.
  document: Document! @relation(name: "DocumentElements")
  path: [Int!]!
  component: Component
  style: Style
}

enum ElementType {
  DOCUMENT
  BLOCK
  # INLINE
  TEXT
  # LEAF
  # document | block | inline | text | leaf
}

type Component {
  id: ID! @unique
  # Component must belong to one on more web. No orphans.
  web: [Web!]! @relation(name: "WebsComponents")
  name: String!
  document: Document @relation(name: "ComponentDocument")
}

# https://github.com/facebook/react-native/blob/master/Libraries/StyleSheet/StyleSheetTypes.js
type Style {
  id: ID! @unique
  web: Web! @relation(name: "WebStyles")
  name: String!
  # https://github.com/prisma/prisma/issues/2034#issuecomment-421850503
  children: [Style!]! @relation(name: "StyleCascade")
  parent: Style @relation(name: "StyleCascade")
  # When the user presses the enter key on the end of a text.
  # Example: heading 1 -> paragraph
  nextStyle: Style @relation(name: "StyleNextStyle")

  # View
  display: StyleDisplay
  width: DimensionValue @relation(name: "StyleWidth")
  height: DimensionValue @relation(name: "StyleHeight")
  bottom: DimensionValue @relation(name: "StyleBottom")
  end: DimensionValue @relation(name: "StyleEnd")
  left: DimensionValue @relation(name: "StyleLeft")
  right: DimensionValue @relation(name: "StyleRight")
  start: DimensionValue @relation(name: "StyleStart")
  top: DimensionValue @relation(name: "StyleTop")
  minWidth: DimensionValue @relation(name: "StyleMinWidth")
  maxWidth: DimensionValue @relation(name: "StyleMaxWidth")
  minHeight: DimensionValue @relation(name: "StyleMinHeight")
  maxHeight: DimensionValue @relation(name: "StyleMaxHeight")
  margin: DimensionValue @relation(name: "StyleMargin")
  marginBottom: DimensionValue @relation(name: "StyleMarginBottom")
  marginEnd: DimensionValue @relation(name: "StyleMarginEnd")
  marginHorizontal: DimensionValue @relation(name: "StyleMarginHorizontal")
  marginLeft: DimensionValue @relation(name: "StyleMarginLeft")
  marginRight: DimensionValue @relation(name: "StyleMarginRight")
  marginStart: DimensionValue @relation(name: "StyleMarginStart")
  marginTop: DimensionValue @relation(name: "StyleMarginTop")
  marginVertical: DimensionValue @relation(name: "StyleMarginVertical")
  padding: DimensionValue @relation(name: "StylePadding")
  paddingBottom: DimensionValue @relation(name: "StylePaddingBottom")
  paddingEnd: DimensionValue @relation(name: "StylePaddingEnd")
  paddingHorizontal: DimensionValue @relation(name: "StylePaddingHorizontal")
  paddingLeft: DimensionValue @relation(name: "StylePaddingLeft")
  paddingRight: DimensionValue @relation(name: "StylePaddingRight")
  paddingStart: DimensionValue @relation(name: "StylePaddingStart")
  paddingTop: DimensionValue @relation(name: "StylePaddingTop")
  paddingVertical: DimensionValue @relation(name: "StylePaddingVertical")
  position: StylePosition
  flexDirection: StyleFlexDirection
  flexWrap: StyleFlexWrap
  justifyContent: StyleJustifyContent
  alignItems: StyleAlignItems
  alignSelf: StyleAlignSelf
  alignContent: StyleAlignContent
  overflow: StyleOverflow
  flex: Int
  flexGrow: Int
  flexShrink: Int
  # flexBasis can be number or 'auto', but Prisma doesn't support union types
  # yet. Therefore, -1 is considered to be 'auto'.
  flexBasis: Int
  zIndex: Int
  direction: StyleDirection
  backgroundColor: ColorValue @relation(name: "StyleBackgroundColor")
  borderColor: ColorValue @relation(name: "StyleBorderColor")
  borderBottomColor: ColorValue @relation(name: "StyleBorderBottomColor")
  borderEndColor: ColorValue @relation(name: "StyleBorderEndColor")
  borderLeftColor: ColorValue @relation(name: "StyleBorderLeftColor")
  borderRightColor: ColorValue @relation(name: "StyleBorderRightColor")
  borderStartColor: ColorValue @relation(name: "StyleBorderStartColor")
  borderTopColor: ColorValue @relation(name: "StyleBorderTopColor")
  borderRadius: BorderValue @relation(name: "StyleBorderRadius")
  borderBottomEndRadius: BorderValue
    @relation(name: "StyleBorderBottomEndRadius")
  borderBottomLeftRadius: BorderValue
    @relation(name: "StyleBorderBottomLeftRadius")
  borderBottomRightRadius: BorderValue
    @relation(name: "StyleBorderBottomRightRadius")
  borderBottomStartRadius: BorderValue
    @relation(name: "StyleBorderBottomStartRadius")
  borderTopEndRadius: BorderValue @relation(name: "StyleBorderTopEndRadius")
  borderTopLeftRadius: BorderValue @relation(name: "StyleBorderTopLeftRadius")
  borderTopRightRadius: BorderValue @relation(name: "StyleBorderTopRightRadius")
  borderTopStartRadius: BorderValue @relation(name: "StyleBorderTopStartRadius")
  borderStyle: StyleBorderStyle
  borderWidth: BorderValue @relation(name: "StyleBorderWidth")
  borderBottomWidth: BorderValue @relation(name: "StyleBorderBottomWidth")
  borderEndWidth: BorderValue @relation(name: "StyleBorderEndWidth")
  borderLeftWidth: BorderValue @relation(name: "StyleBorderLeftWidth")
  borderRightWidth: BorderValue @relation(name: "StyleBorderRightWidth")
  borderStartWidth: BorderValue @relation(name: "StyleBorderStartWidth")
  borderTopWidth: BorderValue @relation(name: "StyleBorderTopWidth")
  opacity: Int

  # Text
  color: ColorValue @relation(name: "StyleColor")
  fontFamily: String
  fontSize: Int
  fontStyle: StyleFontStyle
  fontWeight: StyleFontWeight
  fontVariant: StyleFontVariant
  letterSpacing: Int
  lineHeight: Int
  textAlign: StyleTextAlign
  textAlignVertical: StyleTextAlignVertical
  textDecorationLine: StyleTextDecorationLine
  textTransform: StyleTextTransform

  # TODO: Add missing props.
}

type DimensionValue {
  id: ID! @unique
  web: Web! @relation(name: "WebDimensionValues")
  name: String
  unit: DimensionValueUnit!
  value: Int!
}

type ColorValue {
  id: ID! @unique
  web: Web! @relation(name: "WebColorValues")
  name: String
  r: Int!
  g: Int!
  b: Int!
  a: Float
}

type BorderValue {
  id: ID! @unique
  web: Web! @relation(name: "WebBorderValues")
  name: String
  unit: BorderValueUnit!
  value: Int!
}

enum BorderValueUnit {
  POINT
}

enum StyleDisplay {
  NONE
  FLEX
}

enum DimensionValueUnit {
  POINT
  PERCENTAGE
}

enum StylePosition {
  ABSOLUTE
  RELATIVE
}

enum StyleFlexDirection {
  ROW
  ROW_REVERSE
  COLUMN
  COLUMN_REVERSE
}

enum StyleFlexWrap {
  WRAP
  NOWRAP
  WRAP_REVERSE
}

enum StyleJustifyContent {
  FLEX_START
  FLEX_END
  CENTER
  SPACE_BETWEEN
  SPACE_AROUND
  SPACE_EVENLY
}

enum StyleAlignItems {
  FLEX_START
  FLEX_END
  CENTER
  STRETCH
  BASELINE
}

enum StyleAlignSelf {
  AUTO
  FLEX_START
  FLEX_END
  CENTER
  STRETCH
  BASELINE
}

enum StyleAlignContent {
  FLEX_START
  FLEX_END
  CENTER
  STRETCH
  SPACE_BETWEEN
  SPACE_AROUND
}

enum StyleOverflow {
  VISIBLE
  HIDDEN
  SCROLL
}

enum StyleDirection {
  INHERIT
  LTR
  RTL
}

enum StyleBorderStyle {
  SOLID
  DOTTED
  DASHED
}

enum StyleFontStyle {
  NORMAL
  ITALIC
}

enum StyleFontWeight {
  NORMAL
  BOLD
  # Integers must be prefixed to be valid GraphQL enum value.
  INT_100
  INT_200
  INT_300
  INT_400
  INT_500
  INT_600
  INT_700
  INT_800
  INT_900
}

enum StyleFontVariant {
  SMALL_CAPS
}

enum StyleTextAlign {
  AUTO
  LEFT
  RIGHT
  CENTER
  JUSTIFY
}

enum StyleTextAlignVertical {
  AUTO
  TOP
  BOTTOM
  CENTER
}

enum StyleTextDecorationLine {
  NONE
  UNDERLINE
  LINE_THROUGH
  UNDERLINE_LINE_THROUGH
}

enum StyleTextTransform {
  NONE
  CAPITALIZE
  UPPERCASE
  LOWERCASE
}
