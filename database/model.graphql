# https://github.com/este/este/wiki/GraphQL
# https://www.prisma.io/features/data-modeling/

type User {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!
  # TODO: Refactor to auth providers. Email, Facebook, Twitter, etc.
  email: String! @unique
  password: String!
  # TODO: Refactor to Theme.
  themeName: String
  # Created by a user.
  webs: [Web!]!
  posts: [Post!]!
  images: [Image!]!
}

type Web {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!
  creator: User!
  name: String!
  posts: [Post!]! @relation(name: "WebPosts", onDelete: CASCADE)
}

# Prisma does not support interface nor union types yet.
# https://github.com/prismagraphql/prisma/issues/165
enum PostContentType {
  CHILDREN
  TEXT
  IMAGE
}

type Post {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!
  creator: User!
  # If name is null, use content or ID I suppose. Let's see.
  name: String
  web: Web! @relation(name: "WebPosts", onDelete: SET_NULL)
  # Parents, so we can reuse elements in a tree.
  parents: [Post!]! @relation(name: "PostParentsChildren")
  contentType: PostContentType @default(value: "CHILDREN")
  contentChildren: [Post!]! @relation(name: "PostParentsChildren")
  # It's scalar list aka value object. I suppose it's good enough.
  # I would rather enforce referential integrity, but I don't know how yet.
  contentChildrenOrder: [ID!]!
  contentText: String
  contentTextFormat: String! @default(value: "CommonMark")
  contentImage: Image
}

type Image {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!
  src: String!
  width: Int!
  height: Int!
  creator: User!
}
