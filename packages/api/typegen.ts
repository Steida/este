/**
 * This file was automatically generated by Nexus 0.11.7
 * Do not make changes to this file directly
 */

import * as types from "./types"
import { core } from "nexus"
declare global {
  interface NexusGenCustomDefinitionMethods<TypeName extends string> {
    dateTime<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
    json<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "JSON";
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  CreateWebInput: { // input type
    name: string; // String!
  }
  DeleteWebInput: { // input type
    id: string; // ID!
  }
  SetUserThemeInput: { // input type
    name: string; // String!
  }
  SignInInput: { // input type
    createAccount: boolean; // Boolean!
    email: string; // String!
    password: string; // String!
  }
  UpdateWebInput: { // input type
    id: string; // ID!
    name: string; // String!
  }
}

export interface NexusGenEnums {
  EmailError: "ALREADY_EXISTS" | "EMAIL" | "NOT_EXISTS" | "REQUIRED"
  Max140CharsError: "MAX_140_CHARS" | "REQUIRED"
  PasswordError: "MAX_1024_CHARS" | "MIN_5_CHARS" | "REQUIRED" | "WRONG_PASSWORD"
  URLError: "REQUIRED" | "URL"
}

export interface NexusGenRootTypes {
  CreateWebErrors: { // root type
    name?: NexusGenEnums['Max140CharsError'] | null; // Max140CharsError
  }
  CreateWebPayload: { // root type
    errors?: NexusGenRootTypes['CreateWebErrors'] | null; // CreateWebErrors
    web?: NexusGenRootTypes['Web'] | null; // Web
  }
  DeleteWebPayload: { // root type
    web?: NexusGenRootTypes['Web'] | null; // Web
  }
  Mutation: {};
  Query: {};
  SetUserThemePayload: { // root type
    user?: NexusGenRootTypes['User'] | null; // User
  }
  SignInErrors: { // root type
    email?: NexusGenEnums['EmailError'] | null; // EmailError
    password?: NexusGenEnums['PasswordError'] | null; // PasswordError
  }
  SignInPayload: { // root type
    errors?: NexusGenRootTypes['SignInErrors'] | null; // SignInErrors
    token?: string | null; // String
  }
  UpdateWebErrors: { // root type
    name?: NexusGenEnums['Max140CharsError'] | null; // Max140CharsError
  }
  UpdateWebPayload: { // root type
    errors?: NexusGenRootTypes['UpdateWebErrors'] | null; // UpdateWebErrors
    web?: NexusGenRootTypes['Web'] | null; // Web
  }
  User: { // root type
    createdAt: any; // DateTime!
    email: string; // String!
    id: string; // ID!
    themeName: string; // String!
    updatedAt: any; // DateTime!
  }
  Web: { // root type
    createdAt: any; // DateTime!
    creator: NexusGenRootTypes['User']; // User!
    id: string; // ID!
    name: string; // String!
    updatedAt: any; // DateTime!
  }
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
  DateTime: any;
  JSON: any;
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  CreateWebInput: NexusGenInputs['CreateWebInput'];
  DeleteWebInput: NexusGenInputs['DeleteWebInput'];
  SetUserThemeInput: NexusGenInputs['SetUserThemeInput'];
  SignInInput: NexusGenInputs['SignInInput'];
  UpdateWebInput: NexusGenInputs['UpdateWebInput'];
  EmailError: NexusGenEnums['EmailError'];
  Max140CharsError: NexusGenEnums['Max140CharsError'];
  PasswordError: NexusGenEnums['PasswordError'];
  URLError: NexusGenEnums['URLError'];
}

export interface NexusGenFieldTypes {
  CreateWebErrors: { // field return type
    name: NexusGenEnums['Max140CharsError'] | null; // Max140CharsError
  }
  CreateWebPayload: { // field return type
    errors: NexusGenRootTypes['CreateWebErrors'] | null; // CreateWebErrors
    web: NexusGenRootTypes['Web'] | null; // Web
  }
  DeleteWebPayload: { // field return type
    web: NexusGenRootTypes['Web'] | null; // Web
  }
  Mutation: { // field return type
    createWeb: NexusGenRootTypes['CreateWebPayload']; // CreateWebPayload!
    deleteWeb: NexusGenRootTypes['DeleteWebPayload']; // DeleteWebPayload!
    setUserTheme: NexusGenRootTypes['SetUserThemePayload']; // SetUserThemePayload!
    signIn: NexusGenRootTypes['SignInPayload']; // SignInPayload!
    updateWeb: NexusGenRootTypes['UpdateWebPayload']; // UpdateWebPayload!
  }
  Query: { // field return type
    requiredViewer: NexusGenRootTypes['User']; // User!
    viewer: NexusGenRootTypes['User'] | null; // User
    web: NexusGenRootTypes['Web']; // Web!
  }
  SetUserThemePayload: { // field return type
    user: NexusGenRootTypes['User'] | null; // User
  }
  SignInErrors: { // field return type
    email: NexusGenEnums['EmailError'] | null; // EmailError
    password: NexusGenEnums['PasswordError'] | null; // PasswordError
  }
  SignInPayload: { // field return type
    errors: NexusGenRootTypes['SignInErrors'] | null; // SignInErrors
    token: string | null; // String
  }
  UpdateWebErrors: { // field return type
    name: NexusGenEnums['Max140CharsError'] | null; // Max140CharsError
  }
  UpdateWebPayload: { // field return type
    errors: NexusGenRootTypes['UpdateWebErrors'] | null; // UpdateWebErrors
    web: NexusGenRootTypes['Web'] | null; // Web
  }
  User: { // field return type
    createdAt: any; // DateTime!
    email: string; // String!
    id: string; // ID!
    themeName: string; // String!
    updatedAt: any; // DateTime!
    webs: NexusGenRootTypes['Web'][]; // [Web!]!
  }
  Web: { // field return type
    createdAt: any; // DateTime!
    creator: NexusGenRootTypes['User']; // User!
    id: string; // ID!
    name: string; // String!
    updatedAt: any; // DateTime!
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createWeb: { // args
      input: NexusGenInputs['CreateWebInput']; // CreateWebInput!
    }
    deleteWeb: { // args
      input: NexusGenInputs['DeleteWebInput']; // DeleteWebInput!
    }
    setUserTheme: { // args
      input: NexusGenInputs['SetUserThemeInput']; // SetUserThemeInput!
    }
    signIn: { // args
      input: NexusGenInputs['SignInInput']; // SignInInput!
    }
    updateWeb: { // args
      input: NexusGenInputs['UpdateWebInput']; // UpdateWebInput!
    }
  }
  Query: {
    web: { // args
      id: string; // ID!
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "CreateWebErrors" | "CreateWebPayload" | "DeleteWebPayload" | "Mutation" | "Query" | "SetUserThemePayload" | "SignInErrors" | "SignInPayload" | "UpdateWebErrors" | "UpdateWebPayload" | "User" | "Web";

export type NexusGenInputNames = "CreateWebInput" | "DeleteWebInput" | "SetUserThemeInput" | "SignInInput" | "UpdateWebInput";

export type NexusGenEnumNames = "EmailError" | "Max140CharsError" | "PasswordError" | "URLError";

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = "Boolean" | "DateTime" | "Float" | "ID" | "Int" | "JSON" | "String";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: types.Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}