# https://github.com/este/este/wiki/GraphQL
# Workflow:
#   - update model.graphql
#   - add resolver
#   - test it in playground
#   - run `yarn schema-relay` in another terminal window
#   - restart `yarn dev` in first terminal window
# TODO: Ideally, run `yarn schema-relay` after nodemon.api.json restart
# invoked by model.graphql change. PR anyone?

# import Web, WebEdge, WebConnection from "../../database/schema.graphql"
# import * from "./errors.graphql"

# Like database/model User, but without password, webs, and directives.
type User {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
  themeName: String
}

input AuthInput {
  email: String!
  password: String!
  isSignUp: Boolean!
}

type AuthErrors {
  email: EmailError
  password: PasswordError
}

type AuthPayload {
  token: String
  user: User
  errors: AuthErrors
}

input CreateWebInput {
  name: String!
}

type CreateWebErrors {
  name: Max140CharsError
}

type CreateWebPayload {
  edge: WebEdge
  errors: CreateWebErrors
}

input DeleteWebInput {
  id: ID!
}

type DeleteWebPayload {
  id: ID
}

input SetThemeInput {
  themeName: String!
}

type SetThemePayload {
  user: User
}

type Mutation {
  auth(input: AuthInput!): AuthPayload
  createWeb(input: CreateWebInput!): CreateWebPayload
  deleteWeb(input: DeleteWebInput!): DeleteWebPayload
  setTheme(input: SetThemeInput!): SetThemePayload
}

# Queries do not need inputs and payloads. They are pretty explicit.
type Query {
  me: User
  # Expose only API you need, webs of logged-in user for now.
  # Later, we can extend API for any user.
  # webs(first: Int!, creatorId: ID!): WebConnection
  webs(first: Int!): WebConnection
  web(domain: String!): Web
}
