# import Web from "../database/schema.graphql"
# import WebEdge from "../database/schema.graphql"
# import WebConnection from "../database/schema.graphql"

# https://medium.com/@steida/always-design-graphql-schema-for-further-changes-efc9dee5ceb9
# http://graphql.org/learn/best-practices/#nullability

# TODO: Remove clientMutationId.
# clientMutationId is FBISM which will be removed from OSS version soon.

# Workflow:
#   - update model.graphql
#   - run `yarn schema && yarn relay` in another terminal window

# TODO: Ideally, run `yarn schema && yarn relay` after nodemon.api.json restart
# invoked by model.graphql change. PR anyone?

# Like database/model User, but without password, webs, and DB directives.
# Expose the only API we need.
type User {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
}

# The same as User.
# type Web {
#   id: ID!
#   createdAt: DateTime!
#   updatedAt: DateTime!
#   name: String!
#   domain: String!
#   isPublished: Boolean!
# }

type AuthPayload {
  token: String!
  user: User!
}

input CreateWebInput {
  name: String!
  clientMutationId: String!
}

type CreateWebPayload {
  edge: WebEdge!
}

type Mutation {
  signup(email: String!, password: String!): AuthPayload
  signin(email: String!, password: String!): AuthPayload
  createWeb(input: CreateWebInput!): CreateWebPayload
  deleteWeb(id: ID!): Web
}

type Query {
  me: User
  # Expose only API we need, webs of logged-in user for now.
  # Later, we can extend API for any user.
  # webs(first: Int!, ownerId: ID!): WebConnection
  webs(first: Int!): WebConnection
  web(domain: String!): Web
}
