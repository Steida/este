# import Web from "../database/schema.graphql"

# https://medium.com/@steida/always-design-graphql-schema-for-further-changes-efc9dee5ceb9
# http://graphql.org/learn/best-practices/#nullability

# Like database/model User, but without password, webs, and DB directives.
# Remember, expose only API you need aka as minimal as possible.
type User {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
}

type AuthPayload {
  token: String!
  user: User!
}

type Mutation {
  signup(email: String!, password: String!): AuthPayload
  signin(email: String!, password: String!): AuthPayload
  createWeb(name: String!): Web
  deleteWeb(id: ID!): Web
}

type Query {
  me: User
  # Define only API you need for now. For example, we need logged in user webs.
  # All we need is:
  webs: [Web!]
  # Later, we can extend API to get any user webs, custom sorting, etc.
  # webs(ownerId: ID!): [Web!]
}
