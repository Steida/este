# import Web from "../database/schema.graphql"
# import WebConnection from "../database/schema.graphql"

# https://medium.com/@steida/always-design-graphql-schema-for-further-changes-efc9dee5ceb9
# http://graphql.org/learn/best-practices/#nullability

# Like database/model User, but without password, webs, and DB directives.
# Expose the only API we need.
type User {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
}

type AuthPayload {
  token: String!
  user: User!
}

type Mutation {
  signup(email: String!, password: String!): AuthPayload
  signin(email: String!, password: String!): AuthPayload
  createWeb(name: String!): Web
  deleteWeb(id: ID!): Web
}

type Query {
  me: User
  # Expose only API we need, webs of logged-in user for now.
  # Later, we can extend API for any user.
  # webs(ownerId: ID!): WebConnection
  webs: WebConnection
  web(domain: String!): Web
}
