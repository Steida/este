# import Web from "../database/schema.graphql"
# import WebEdge from "../database/schema.graphql"
# import WebConnection from "../database/schema.graphql"

# http://graphql.org/learn/best-practices/#versioning
# http://graphql.org/learn/best-practices/#nullability
# https://medium.com/@calebmer/when-to-use-graphql-non-null-fields-4059337f6fc8
# http://graphql.org/learn/schema/
# tl;dr Use non-nullable only when you are sure API will never change.

# TODO: Remove clientMutationId.
# clientMutationId is FBISM which will be removed from Relay soon.
# Unfortunately, Relay needs it for all mutations.
# TODO: https://github.com/facebook/relay/issues/2077

# Workflow:
#   - update model.graphql
#   - add resolver
#   - test it in playground
#   - run `yarn schema-relay` in another terminal window
#   - restart `yarn dev` in first terminal window
# TODO: Ideally, run `yarn schema-relay` after nodemon.api.json restart
# invoked by model.graphql change. PR anyone?

# Like database/model User, but without password, webs, and directives.
type User {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
  # nullable, because it will be changed to Theme later
  themeName: String
}

type AuthPayload {
  token: String!
  user: User!
}

# Note FooInput and FooPayload pattern.
# Objects are good for further scheme updates aka versioning.
# Inputs are non-nullable, because the server has to support obsolete clients.
# Payloads are nullable, because mutation can fail or be removed.
# clientMutationId is nullable, because it will be removed.

input CreateWebInput {
  name: String!
  clientMutationId: String
}

type CreateWebPayload {
  edge: WebEdge
}

input DeleteWebInput {
  id: ID!
  clientMutationId: String
}

type DeleteWebPayload {
  id: ID
}

input UpdateUserInput {
  themeName: String!
  clientMutationId: String
}

type UpdateUserPayload {
  user: User
}

type Mutation {
  signup(email: String!, password: String!): AuthPayload
  signin(email: String!, password: String!): AuthPayload
  createWeb(input: CreateWebInput!): CreateWebPayload
  deleteWeb(input: DeleteWebInput!): DeleteWebPayload
  updateUser(input: UpdateUserInput!): UpdateUserPayload
}

type Query {
  me: User
  # Expose only API we need, webs of logged-in user for now.
  # Later, we can extend API for any user.
  # webs(first: Int!, ownerId: ID!): WebConnection
  webs(first: Int!): WebConnection
  web(domain: String!): Web
}
